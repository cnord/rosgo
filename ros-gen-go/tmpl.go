package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _msg_partial_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xdf\x6f\x9c\x46\x10\xc7\x9f\xe1\xaf\xf8\xf6\xa4\x58\xe0\x10\x2e\x6a\x95\x17\xbb\x54\xaa\x1a\xb7\xaa\x54\xbb\x55\x6c\xb5\x0f\x96\x95\x6c\x8f\x01\xaf\x02\x8b\xb5\xbb\xe4\x7c\x41\xfc\xef\xd5\x2c\x3f\x0e\xc8\x9d\xe3\x56\xbd\x27\x76\x6f\x7e\x7c\x67\xe6\x33\xdb\x34\x90\x19\xe2\x9f\x2a\x65\xac\x50\xd6\xa0\x6d\xfd\x0d\x1f\x10\xf8\x5e\xd3\xbc\x82\x16\x2a\xa7\x85\x81\xd7\x34\x88\xaf\x44\x49\x68\x5b\xf0\xf7\xcd\xee\x81\x86\x73\xe2\x6e\xfe\x14\x45\x4d\xbd\xed\x2b\x90\x4a\xf9\x3b\xf4\x9b\x66\xf8\xf6\xed\xee\x81\xf0\xfe\xd2\xe4\xd3\x60\xc6\xea\x7a\x63\xd1\xf8\x9e\xa5\x47\xcb\x47\xa9\x72\xdf\x53\xfc\xf7\x70\x28\xd3\x37\xa6\x2e\x87\x63\xeb\xfb\x59\xad\x36\x08\x2c\x4e\x17\xd1\x42\xdc\xd0\xa3\x0d\xc2\xde\x94\xa3\x6a\xb2\xb5\x56\xb0\x31\x87\x7f\xda\x97\x3f\x0e\xfb\xb2\x9a\xa7\x7d\x2f\xdf\xbe\xb9\xae\xcb\xc3\xde\x9d\xfc\xaf\xe4\xa6\xed\x25\x19\x23\x72\x56\xa0\x2b\x13\xf7\x27\x0e\x54\xe2\x2c\x81\xa2\x6d\x30\xf5\xe0\x36\xaf\x4f\x71\xf5\xfb\xcd\xc5\x19\xae\x2a\x28\xa2\x14\xb6\x82\x54\xd2\x4a\x51\xc8\xcf\x84\x4c\x52\x91\x1a\x08\x03\x7b\x4f\x3b\x08\x4d\x10\x45\x81\xcf\xa4\x2b\x7c\xe2\x69\x45\xd8\xde\xcb\xcd\x3d\xa4\x41\x4a\x99\xa8\x0b\x0b\xa9\x90\x57\x38\x5d\xf3\x1c\xfb\x02\x9c\xf2\x4f\x42\x33\x1f\x8b\xe1\x25\x38\x59\xce\xb3\xf1\x3d\xef\x03\x5f\xbc\x13\x5b\xb4\xed\x87\xc8\xf7\xbc\x15\x9f\xff\x10\x9b\x8f\x22\x1f\xa0\x59\x4f\x7c\x56\xa3\x4d\xd7\xc5\xfe\x8a\xe9\xe9\x98\x39\xcc\xcb\x84\xd5\x9f\xbb\x4a\x0f\x80\xca\xa8\xff\x6a\x7e\xd4\x5a\xec\xd0\xb6\xb7\xdd\x4d\x6e\x11\xbb\xab\x6b\x6e\xd3\x6b\xb4\x2d\x7b\xed\x6f\xdc\xb9\xa3\xf6\x6e\xfc\x62\x93\x5f\xaa\x09\xf7\x33\xd0\xc7\xe1\x96\x38\x9d\x0d\xf6\x9a\x74\x37\x8e\x60\x0b\x59\xc5\x7f\x69\x69\x49\x87\x08\x48\x6b\x90\xd6\x95\x0e\x8f\xd6\x02\xf0\xf5\xbc\x02\xdf\x5b\xaf\xe1\x82\xc0\xb0\xd4\x42\x5a\x5b\x10\xab\x90\x42\xf9\xe0\x90\x48\xf0\xb7\x54\x42\xef\xba\x64\xc1\x36\x1a\xce\xbf\x39\xe3\x0b\x67\x1b\xa1\x96\xca\x7e\xf7\x6d\x50\x90\x0a\xca\x78\xaa\x39\x0c\x7d\x4f\x66\x2e\xd4\x37\x09\x94\x2c\xdc\x50\x7b\x1a\xb2\xd2\xc6\x17\xac\x3b\x0b\x56\x9b\xaa\x2e\x52\xa8\xca\x62\xeb\x14\x09\x27\xb2\x20\x95\xdb\xfb\x33\xbc\x30\xab\x88\x83\x84\x3c\x4a\x20\xab\x34\xde\x47\xa0\x82\x1c\xcf\x5d\xb5\xb3\xc4\x68\x7c\x00\xe8\x53\x27\x6e\x0d\xc6\xf6\xf5\xfb\xe0\xba\xc3\x25\xad\x16\xaf\xd0\x2a\xc2\x09\xc7\x0e\xcf\xe7\xc2\xe1\x7e\xbd\x78\xd2\xda\x5d\xb4\x9d\x24\x37\xbf\xc2\x50\xd7\xec\xff\x9e\x77\xde\xbe\x03\x02\x66\xe9\xc7\xcc\x1d\x39\xde\xfe\x85\xec\x7b\x7c\x1c\xa6\xb7\x64\x46\x9c\x34\xe3\xf4\x8e\x44\xfa\x5c\x9c\x98\x9c\x49\xb4\xce\x6a\x41\x17\x9c\xe0\xf5\x1a\x1c\xf8\x10\x61\x1e\x3f\x04\xee\xbe\xc3\x67\x24\x65\x84\x8e\x3d\x03\x7d\x84\xb9\x13\x76\x7d\xa2\x43\x33\xba\x84\x62\xb4\x34\x2b\xe9\xc8\x72\x79\x99\xa3\x49\x19\x0b\xce\x86\xa2\xbe\x5c\x71\xa7\xd4\x45\xf8\x01\xcb\x75\x3f\x06\xf8\xf1\xb4\xb0\x55\x85\x42\xe8\x9c\xce\x40\x8f\x0f\xb4\xb1\x94\x26\xcb\xb0\x11\xf2\xca\x26\x2f\xd2\x55\xe4\x62\xec\x05\x0e\xd0\x79\x73\xfe\x13\x94\xe2\x23\x05\xb7\x77\x5f\xbc\x35\x11\xa4\xb2\x81\x0b\x12\xce\xde\x1d\x8f\x75\x49\x5e\xa8\xd7\xe7\x90\xf8\x7e\x6f\x77\x0e\xf9\xf2\xe5\xa1\x95\x9a\x40\x34\x83\x5b\x3f\x03\xee\x5b\x79\xf7\x6f\x16\xac\xf5\xe7\xf5\xfe\x8f\x4a\x9e\xb1\x66\xde\xd7\xb6\xec\x9f\x00\x00\x00\xff\xff\x33\x93\x61\x3d\x0b\x09\x00\x00")

func msg_partial_tmpl() ([]byte, error) {
	return bindata_read(
		_msg_partial_tmpl,
		"msg.partial.tmpl",
	)
}

var _msg_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xbb\x4e\xec\x30\x14\x45\xeb\xf8\x2b\xf6\x75\x75\x29\xe2\xf4\x74\xc0\x80\x48\x33\x83\x34\xf3\x03\x67\x92\x13\xcb\xc2\x2f\xd9\xa6\x88\xac\xfc\x3b\xf2\x84\x87\xe8\xec\xa3\xb5\xb6\xd6\x30\xe0\x29\xcc\x0c\xcd\x9e\x13\x15\x9e\x71\x5d\x91\x42\xee\x35\xfb\x5e\x07\x25\x86\x01\x39\x7c\xa4\x89\xef\x51\x2b\xd4\x8b\xb1\x3c\xfa\x25\xa8\xd1\xb7\xe7\x23\x65\xc6\xb6\x35\xea\x70\xc2\xf1\x74\xc1\xf3\x61\xbc\xfc\x13\x91\xa6\x77\xd2\xfc\x57\x79\xdb\x8f\x47\x72\x37\x47\x18\x17\x43\x2a\xf8\x2f\xba\x5a\x7b\x98\x05\x21\x41\x9d\x23\x4f\xea\x95\xf2\xd9\x9a\x89\x7f\xbf\x0f\x29\xd1\xda\xac\x4e\xb2\x9f\xc2\x6c\xbc\x1e\xae\xc6\x53\x5a\xa5\xe8\xe4\xe2\x8a\xdc\x57\xd8\xcf\x3b\x65\x82\x14\x02\x2d\x20\x91\xd7\xdf\x4b\x5f\x09\xb9\x31\x80\x6c\x79\xd8\x36\x79\x03\x7f\xe4\x3b\x21\x6a\x45\x61\x17\x2d\x15\x86\x74\x59\xab\x48\xa9\x18\xb2\xaa\xb8\x68\xe5\x3e\xd6\xd0\xcf\x00\x00\x00\xff\xff\x3a\xb2\xfc\x15\x3f\x01\x00\x00")

func msg_tmpl() ([]byte, error) {
	return bindata_read(
		_msg_tmpl,
		"msg.tmpl",
	)
}

var _srv_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcf\x6f\xda\x30\x14\xc7\xcf\xf8\xaf\xf8\xce\x87\x2a\x54\x6b\x72\xea\x65\xd2\x0e\xdb\xba\x69\x1c\xa0\x53\xe1\xbe\xba\xc9\x23\x8a\x46\x9c\xd4\x76\xa0\x28\xca\xff\x3e\xd9\x71\xa0\x80\x0b\xdc\x9c\xf7\xde\xf7\x93\xf7\xcb\x4e\x12\xfc\xa8\x32\x42\x4e\x92\x94\x30\x94\xe1\x65\x0b\x55\xe9\xbb\x9c\xe4\x5d\x5e\xc5\x2c\x49\xa0\xab\x46\xa5\xf4\x05\x6d\x8b\xf8\x57\xb1\xa2\x89\x5c\x56\xf1\x44\xda\xe3\x77\xa1\x09\x5d\x67\xa3\x1e\x1e\x31\x7b\x5c\xe0\xe7\xc3\x64\xf1\x89\xd5\x22\xfd\x27\x72\x3a\x94\xfc\xe9\x8d\x33\x51\x3a\x0d\x2b\xca\xba\x52\x06\x11\x1b\xb5\xed\x1d\x8a\x25\x2a\x85\x78\x5e\x53\x1a\x3f\xd1\x6b\x43\xda\xb8\xf3\x6f\xa1\xe7\xab\x22\xa5\xb0\xeb\x9b\x52\x62\xbb\x73\xe9\xba\x92\x9a\xc2\xb2\x43\x5f\xaf\xeb\x3a\x36\xe2\x24\xd3\x2a\x2b\x64\x9e\xbc\x14\x52\xa8\x2d\x67\x23\xbe\x2c\x0d\xef\xb3\x22\x99\xf5\x51\x45\xc5\x19\x83\x2d\x48\x09\x99\x0f\x58\x5f\x92\xb6\x31\x00\xb7\xe5\xa2\xeb\xb8\x0b\xdc\x89\xc7\xcc\xf6\x67\x4e\x6a\x6d\xf3\x31\xdb\x9a\x50\x92\x11\x99\x30\x82\xb9\xaf\xbf\x73\xb5\xb6\x52\x87\xf4\xed\x81\x36\xaa\x49\x0d\x5a\x06\x48\x6b\x02\xac\xa9\x90\x39\x03\xca\xec\x5e\x37\xe5\x3b\x83\xa1\x37\x73\x10\xa1\xe8\x75\x61\xd1\xaa\xd2\xf1\x94\xb4\x16\x39\xd9\x6f\xe7\xd1\x41\x4f\xc7\xd8\xb2\x91\x29\x22\x83\xdb\x50\x42\x63\xd8\x43\x34\xf6\xff\x40\x0b\x45\xa6\x51\x12\x26\x76\xf9\x75\x97\xe4\xd3\x87\xfb\x79\x53\x06\x01\xbe\x9e\x8b\x88\x05\xbd\x99\x20\xc0\xd5\x7f\x51\xee\x77\xc7\x96\x1b\x8d\x8f\x1b\xf0\x1e\x37\x74\xef\x0a\x62\xbf\x56\xd7\x20\xf5\x75\xc8\x19\x6d\xfc\xaa\x78\xe0\xb0\x38\x76\x13\x30\x00\x25\x6d\xa2\x13\xad\x9d\xe1\x5a\x28\x44\x0c\x08\xad\xd4\x57\xdc\x04\x57\xad\x65\xa3\x11\x3f\x73\x55\x93\x63\x05\xff\xec\x72\xe1\x3b\x7b\x3f\xdb\xbd\xe7\x79\xe7\x79\x12\x1b\x74\xdd\x73\x6f\x9e\xea\xfc\x18\xe5\x67\x72\xc6\xdf\x77\xd8\x06\xb8\xab\xe4\x6e\xcc\xb9\xdb\x82\x61\xce\x27\x51\xde\xee\x63\x7a\x6e\x20\xa8\x77\xec\x2f\x84\xc6\x6d\x70\x97\xfc\xa4\x0f\xe7\xbe\x9f\xf9\x8d\x1e\x1e\xab\xdd\xd0\x3f\x20\xe9\x6b\x48\x3e\xdd\xce\x3d\x26\x1f\x55\xc6\xda\x16\x86\xca\x7a\x25\x0c\x81\x97\x3a\x8f\x6b\xa1\x4c\x21\x56\xb1\x29\xeb\x15\x3f\x7d\x43\xdd\x43\x1c\x04\xfa\x2e\x5c\x4b\xdc\x3f\xaf\x16\xf9\x3f\x00\x00\xff\xff\xfe\x6b\x1b\x69\x57\x06\x00\x00")

func srv_tmpl() ([]byte, error) {
	return bindata_read(
		_srv_tmpl,
		"srv.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"msg.partial.tmpl": msg_partial_tmpl,
	"msg.tmpl": msg_tmpl,
	"srv.tmpl": srv_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"msg.partial.tmpl": &_bintree_t{msg_partial_tmpl, map[string]*_bintree_t{
	}},
	"msg.tmpl": &_bintree_t{msg_tmpl, map[string]*_bintree_t{
	}},
	"srv.tmpl": &_bintree_t{srv_tmpl, map[string]*_bintree_t{
	}},
}}
