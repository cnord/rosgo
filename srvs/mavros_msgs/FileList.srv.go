// Code generated by ros-gen-go.
// source: FileList.srv
// DO NOT EDIT!
package mavros_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

// Service type metadata
type _SrvFileList struct {
	name    string
	md5sum  string
	text    string
	reqType ros.MessageType
	resType ros.MessageType
}

func (t *_SrvFileList) Name() string                  { return t.name }
func (t *_SrvFileList) MD5Sum() string                { return t.md5sum }
func (t *_SrvFileList) Text() string                  { return t.text }
func (t *_SrvFileList) RequestType() ros.MessageType  { return t.reqType }
func (t *_SrvFileList) ResponseType() ros.MessageType { return t.resType }
func (t *_SrvFileList) NewService() ros.Service {
	return new(FileList)
}

var (
	SrvFileList = &_SrvFileList{
		"mavros_msgs/FileList",
		"1647c627907cac72fa2d06e0e5f96aac",
		`# FTP::List
#
# :success:	indicates success end of request
# :r_errno:	remote errno if applicapable

string dir_path
---
mavros_msgs/FileEntry[] list
bool success
int32 r_errno
`,
		MsgFileListRequest,
		MsgFileListResponse,
	}
)

type FileList struct {
	Request  FileListRequest
	Response FileListResponse
}

func (s *FileList) ReqMessage() ros.Message { return &s.Request }
func (s *FileList) ResMessage() ros.Message { return &s.Response }

// FileListRequest

type _MsgFileListRequest struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgFileListRequest) Text() string {
	return t.text
}

func (t *_MsgFileListRequest) Name() string {
	return t.name
}

func (t *_MsgFileListRequest) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgFileListRequest) NewMessage() ros.Message {
	m := new(FileListRequest)

	return m
}

var (
	MsgFileListRequest = &_MsgFileListRequest{
		`# FTP::List
#
# :success:	indicates success end of request
# :r_errno:	remote errno if applicapable

string dir_path
`,
		"mavros_msgs/FileListRequest",
		"",
	}
)

type FileListRequest struct {
	DirPath string
}

func (m *FileListRequest) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "string", &m.DirPath); err != nil {
		return err
	}

	return
}

func (m *FileListRequest) Deserialize(r io.Reader) (err error) {
	// DirPath
	if err = ros.DeserializeMessageField(r, "string", &m.DirPath); err != nil {
		return err
	}

	return
}

// FileListResponse

type _MsgFileListResponse struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgFileListResponse) Text() string {
	return t.text
}

func (t *_MsgFileListResponse) Name() string {
	return t.name
}

func (t *_MsgFileListResponse) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgFileListResponse) NewMessage() ros.Message {
	m := new(FileListResponse)

	return m
}

var (
	MsgFileListResponse = &_MsgFileListResponse{
		`
mavros_msgs/FileEntry[] list
bool success
int32 r_errno
`,
		"mavros_msgs/FileListResponse",
		"",
	}
)

type FileListResponse struct {
	List    []FileEntry
	Success bool
	RErrno  int32
}

func (m *FileListResponse) Serialize(w io.Writer) (err error) {
	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.List)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.List {
		if err = ros.SerializeMessageField(w, "mavros_msgs/FileEntry", &elem); err != nil {
			return err
		}
	}

	if err = ros.SerializeMessageField(w, "bool", &m.Success); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "int32", &m.RErrno); err != nil {
		return err
	}

	return
}

func (m *FileListResponse) Deserialize(r io.Reader) (err error) {
	// List
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for List: %s", err)
		}
		m.List = make([]FileEntry, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "mavros_msgs/FileEntry", &m.List[i]); err != nil {
				return err
			}
		}
	}

	// Success
	if err = ros.DeserializeMessageField(r, "bool", &m.Success); err != nil {
		return err
	}

	// RErrno
	if err = ros.DeserializeMessageField(r, "int32", &m.RErrno); err != nil {
		return err
	}

	return
}
