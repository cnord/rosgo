// Code generated by ros-gen-go.
// source: Header.msg
// DO NOT EDIT!
package std_msgs

import (
	"io"

	"github.com/cnord/rosgo/ros"
)

type _MsgHeader struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgHeader) Text() string {
	return t.text
}

func (t *_MsgHeader) Name() string {
	return t.name
}

func (t *_MsgHeader) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgHeader) NewMessage() ros.Message {
	m := new(Header)

	return m
}

var (
	MsgHeader = &_MsgHeader{
		`# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
`,
		"std_msgs/Header",
		"2176decaecbce78abc3b96ef049fabed",
	}
)

type Header struct {
	Seq     uint32
	Stamp   ros.Time
	FrameId string
}

func (m *Header) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "uint32", &m.Seq); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "time", &m.Stamp); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "string", &m.FrameId); err != nil {
		return err
	}

	return
}

func (m *Header) Deserialize(r io.Reader) (err error) {
	// Seq
	if err = ros.DeserializeMessageField(r, "uint32", &m.Seq); err != nil {
		return err
	}

	// Stamp
	if err = ros.DeserializeMessageField(r, "time", &m.Stamp); err != nil {
		return err
	}

	// FrameId
	if err = ros.DeserializeMessageField(r, "string", &m.FrameId); err != nil {
		return err
	}

	return
}
