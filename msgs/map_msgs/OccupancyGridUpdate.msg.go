// Code generated by ros-gen-go.
// source: OccupancyGridUpdate.msg
// DO NOT EDIT!
package map_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgOccupancyGridUpdate struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgOccupancyGridUpdate) Text() string {
	return t.text
}

func (t *_MsgOccupancyGridUpdate) Name() string {
	return t.name
}

func (t *_MsgOccupancyGridUpdate) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgOccupancyGridUpdate) NewMessage() ros.Message {
	m := new(OccupancyGridUpdate)

	return m
}

var (
	MsgOccupancyGridUpdate = &_MsgOccupancyGridUpdate{
		`Header header
int32 x
int32 y
uint32 width
uint32 height
int8[] data
`,
		"map_msgs/OccupancyGridUpdate",
		"b295be292b335c34718bd939deebe1c9",
	}
)

type OccupancyGridUpdate struct {
	Header std_msgs.Header
	X      int32
	Y      int32
	Width  uint32
	Height uint32
	Data   []int8
}

func (m *OccupancyGridUpdate) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "int32", &m.X); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "int32", &m.Y); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint32", &m.Width); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint32", &m.Height); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Data)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Data {
		if err = ros.SerializeMessageField(w, "int8", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *OccupancyGridUpdate) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "Header", &m.Header); err != nil {
		return err
	}

	// X
	if err = ros.DeserializeMessageField(r, "int32", &m.X); err != nil {
		return err
	}

	// Y
	if err = ros.DeserializeMessageField(r, "int32", &m.Y); err != nil {
		return err
	}

	// Width
	if err = ros.DeserializeMessageField(r, "uint32", &m.Width); err != nil {
		return err
	}

	// Height
	if err = ros.DeserializeMessageField(r, "uint32", &m.Height); err != nil {
		return err
	}

	// Data
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Data: %s", err)
		}
		m.Data = make([]int8, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "int8", &m.Data[i]); err != nil {
				return err
			}
		}
	}

	return
}
