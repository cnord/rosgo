// Code generated by ros-gen-go.
// source: ADSBVehicle.msg
// DO NOT EDIT!
package mavros_msgs

import (
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

const (
	ALT_PRESSURE_QNH          uint8  = 0
	ALT_GEOMETRIC             uint8  = 1
	EMITTER_NO_INFO           uint8  = 0
	EMITTER_LIGHT             uint8  = 1
	EMITTER_SMALL             uint8  = 2
	EMITTER_LARGE             uint8  = 3
	EMITTER_HIGH_VORTEX_LARGE uint8  = 4
	EMITTER_HEAVY             uint8  = 5
	EMITTER_HIGHLY_MANUV      uint8  = 6
	EMITTER_ROTOCRAFT         uint8  = 7
	EMITTER_UNASSIGNED        uint8  = 8
	EMITTER_GLIDER            uint8  = 9
	EMITTER_LIGHTER_AIR       uint8  = 10
	EMITTER_PARACHUTE         uint8  = 11
	EMITTER_ULTRA_LIGHT       uint8  = 12
	EMITTER_UNASSIGNED2       uint8  = 13
	EMITTER_UAV               uint8  = 14
	EMITTER_SPACE             uint8  = 15
	EMITTER_UNASSGINED3       uint8  = 16
	EMITTER_EMERGENCY_SURFACE uint8  = 17
	EMITTER_SERVICE_SURFACE   uint8  = 18
	EMITTER_POINT_OBSTACLE    uint8  = 19
	FLAG_VALID_COORDS         uint16 = 1
	FLAG_VALID_ALTITUDE       uint16 = 2
	FLAG_VALID_HEADING        uint16 = 4
	FLAG_VALID_VELOCITY       uint16 = 8
	FLAG_VALID_CALLSIGN       uint16 = 16
	FLAG_VALID_SQUAWK         uint16 = 32
	FLAG_SIMULATED            uint16 = 64
)

type _MsgADSBVehicle struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgADSBVehicle) Text() string {
	return t.text
}

func (t *_MsgADSBVehicle) Name() string {
	return t.name
}

func (t *_MsgADSBVehicle) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgADSBVehicle) NewMessage() ros.Message {
	m := new(ADSBVehicle)

	return m
}

var (
	MsgADSBVehicle = &_MsgADSBVehicle{
		`# The location and information of an ADSB vehicle
#
# http://mavlink.org/messages/common#ADSB_VEHICLE

# [[[cog:
# from pymavlink.dialects.v20 import common
#
# def decl_enum(ename, pfx='', bsz=8):
#     enum = sorted(common.enums[ename].items())
#     enum.pop() # remove ENUM_END
#
#     cog.outl("# " + ename)
#     for k, e in enum:
#         sn = e.name[len(ename) + 1:]
#         l = "uint{bsz} {pfx}{sn} = {k}".format(**locals())
#         if e.description:
#             l += ' ' * (40 - len(l)) + ' # ' + e.description
#         cog.outl(l)
#
# decl_enum('ADSB_ALTITUDE_TYPE', 'ALT_')
# decl_enum('ADSB_EMITTER_TYPE', 'EMITTER_')
# decl_enum('ADSB_FLAGS', 'FLAG_', 16)
# ]]]
# ADSB_ALTITUDE_TYPE
uint8 ALT_PRESSURE_QNH = 0               # Altitude reported from a Baro source using QNH reference
uint8 ALT_GEOMETRIC = 1                  # Altitude reported from a GNSS source
# ADSB_EMITTER_TYPE
uint8 EMITTER_NO_INFO = 0
uint8 EMITTER_LIGHT = 1
uint8 EMITTER_SMALL = 2
uint8 EMITTER_LARGE = 3
uint8 EMITTER_HIGH_VORTEX_LARGE = 4
uint8 EMITTER_HEAVY = 5
uint8 EMITTER_HIGHLY_MANUV = 6
uint8 EMITTER_ROTOCRAFT = 7
uint8 EMITTER_UNASSIGNED = 8
uint8 EMITTER_GLIDER = 9
uint8 EMITTER_LIGHTER_AIR = 10
uint8 EMITTER_PARACHUTE = 11
uint8 EMITTER_ULTRA_LIGHT = 12
uint8 EMITTER_UNASSIGNED2 = 13
uint8 EMITTER_UAV = 14
uint8 EMITTER_SPACE = 15
uint8 EMITTER_UNASSGINED3 = 16
uint8 EMITTER_EMERGENCY_SURFACE = 17
uint8 EMITTER_SERVICE_SURFACE = 18
uint8 EMITTER_POINT_OBSTACLE = 19
# ADSB_FLAGS
uint16 FLAG_VALID_COORDS = 1
uint16 FLAG_VALID_ALTITUDE = 2
uint16 FLAG_VALID_HEADING = 4
uint16 FLAG_VALID_VELOCITY = 8
uint16 FLAG_VALID_CALLSIGN = 16
uint16 FLAG_VALID_SQUAWK = 32
uint16 FLAG_SIMULATED = 64
# [[[end]]] (checksum: e35e77be43548bd572a3cb24138fc2fd)

std_msgs/Header header

uint32 ICAO_address
string callsign

float64 latitude
float64 longitude
float32 altitude 	# AMSL

float32 heading		# deg [0..360)
float32 hor_velocity	# m/s
float32 ver_velocity	# m/s

uint8 altitude_type	# Type from ADSB_ALTITUDE_TYPE enum
uint8 emitter_type	# Type from ADSB_EMITTER_TYPE enum

duration tslc		# Duration from last communication, seconds [0..255]
uint16 flags		# ADSB_FLAGS bit field
uint16 squawk		# Squawk code
`,
		"mavros_msgs/ADSBVehicle",
		"f71cc75a8e9e7b77d92f98d9a5315fd1",
	}
)

type ADSBVehicle struct {
	Header       std_msgs.Header
	ICAOAddress  uint32
	Callsign     string
	Latitude     float64
	Longitude    float64
	Altitude     float32
	Heading      float32
	HorVelocity  float32
	VerVelocity  float32
	AltitudeType uint8
	EmitterType  uint8
	Tslc         ros.Duration
	Flags        uint16
	Squawk       uint16
}

func (m *ADSBVehicle) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint32", &m.ICAOAddress); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "string", &m.Callsign); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float64", &m.Latitude); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float64", &m.Longitude); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.Altitude); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.Heading); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.HorVelocity); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.VerVelocity); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.AltitudeType); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.EmitterType); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "duration", &m.Tslc); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint16", &m.Flags); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint16", &m.Squawk); err != nil {
		return err
	}

	return
}

func (m *ADSBVehicle) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	// ICAOAddress
	if err = ros.DeserializeMessageField(r, "uint32", &m.ICAOAddress); err != nil {
		return err
	}

	// Callsign
	if err = ros.DeserializeMessageField(r, "string", &m.Callsign); err != nil {
		return err
	}

	// Latitude
	if err = ros.DeserializeMessageField(r, "float64", &m.Latitude); err != nil {
		return err
	}

	// Longitude
	if err = ros.DeserializeMessageField(r, "float64", &m.Longitude); err != nil {
		return err
	}

	// Altitude
	if err = ros.DeserializeMessageField(r, "float32", &m.Altitude); err != nil {
		return err
	}

	// Heading
	if err = ros.DeserializeMessageField(r, "float32", &m.Heading); err != nil {
		return err
	}

	// HorVelocity
	if err = ros.DeserializeMessageField(r, "float32", &m.HorVelocity); err != nil {
		return err
	}

	// VerVelocity
	if err = ros.DeserializeMessageField(r, "float32", &m.VerVelocity); err != nil {
		return err
	}

	// AltitudeType
	if err = ros.DeserializeMessageField(r, "uint8", &m.AltitudeType); err != nil {
		return err
	}

	// EmitterType
	if err = ros.DeserializeMessageField(r, "uint8", &m.EmitterType); err != nil {
		return err
	}

	// Tslc
	if err = ros.DeserializeMessageField(r, "duration", &m.Tslc); err != nil {
		return err
	}

	// Flags
	if err = ros.DeserializeMessageField(r, "uint16", &m.Flags); err != nil {
		return err
	}

	// Squawk
	if err = ros.DeserializeMessageField(r, "uint16", &m.Squawk); err != nil {
		return err
	}

	return
}
