// Code generated by ros-gen-go.
// source: HilActuatorControls.msg
// DO NOT EDIT!
package mavros_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgHilActuatorControls struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgHilActuatorControls) Text() string {
	return t.text
}

func (t *_MsgHilActuatorControls) Name() string {
	return t.name
}

func (t *_MsgHilActuatorControls) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgHilActuatorControls) NewMessage() ros.Message {
	m := new(HilActuatorControls)

	return m
}

var (
	MsgHilActuatorControls = &_MsgHilActuatorControls{
		`# HilActuatorControls.msg
#
# ROS representation of MAVLink HIL_ACTUATOR_CONTROLS
# See mavlink message documentation here:
# https://pixhawk.ethz.ch/mavlink/#HIL_ACTUATOR_CONTROLS

std_msgs/Header header
float32[16] controls
uint8 mode
uint64 flags
`,
		"mavros_msgs/HilActuatorControls",
		"18482e8ef0330ac2fc9a0421be1d11c3",
	}
)

type HilActuatorControls struct {
	Header   std_msgs.Header
	Controls [16]float32
	Mode     uint8
	Flags    uint64
}

func (m *HilActuatorControls) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Controls)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Controls {
		if err = ros.SerializeMessageField(w, "float32", &elem); err != nil {
			return err
		}
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.Mode); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint64", &m.Flags); err != nil {
		return err
	}

	return
}

func (m *HilActuatorControls) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	// Controls
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Controls: %s", err)
		}
		if size > 16 {
			return fmt.Errorf("array size for Controls too large: expected=16, got=%d", size)
		}
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float32", &m.Controls[i]); err != nil {
				return err
			}
		}
	}

	// Mode
	if err = ros.DeserializeMessageField(r, "uint8", &m.Mode); err != nil {
		return err
	}

	// Flags
	if err = ros.DeserializeMessageField(r, "uint64", &m.Flags); err != nil {
		return err
	}

	return
}
