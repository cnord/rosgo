// Code generated by ros-gen-go.
// source: Vibration.msg
// DO NOT EDIT!
package mavros_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/geometry_msgs"
	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgVibration struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgVibration) Text() string {
	return t.text
}

func (t *_MsgVibration) Name() string {
	return t.name
}

func (t *_MsgVibration) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgVibration) NewMessage() ros.Message {
	m := new(Vibration)

	return m
}

var (
	MsgVibration = &_MsgVibration{
		`# VIBRATION message data
# @description: Vibration levels and accelerometer clipping

std_msgs/Header header

geometry_msgs/Vector3 vibration		# 3-axis vibration levels
float32[3] clipping				# Accelerometers clipping`,
		"mavros_msgs/Vibration",
		"eb92bf9b7aa735dfcd06b3ede5027d02",
	}
)

type Vibration struct {
	Header    std_msgs.Header
	Vibration geometry_msgs.Vector3
	Clipping  [3]float32
}

func (m *Vibration) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "geometry_msgs/Vector3", &m.Vibration); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Clipping)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Clipping {
		if err = ros.SerializeMessageField(w, "float32", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *Vibration) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	// Vibration
	if err = ros.DeserializeMessageField(r, "geometry_msgs/Vector3", &m.Vibration); err != nil {
		return err
	}

	// Clipping
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Clipping: %s", err)
		}
		if size > 3 {
			return fmt.Errorf("array size for Clipping too large: expected=3, got=%d", size)
		}
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float32", &m.Clipping[i]); err != nil {
				return err
			}
		}
	}

	return
}
