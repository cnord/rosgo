// Code generated by ros-gen-go.
// source: StatusText.msg
// DO NOT EDIT!
package mavros_msgs

import (
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

const (
	StatusText_EMERGENCY uint8 = 0
	StatusText_ALERT     uint8 = 1
	StatusText_CRITICAL  uint8 = 2
	StatusText_ERROR     uint8 = 3
	StatusText_WARNING   uint8 = 4
	StatusText_NOTICE    uint8 = 5
	StatusText_INFO      uint8 = 6
	StatusText_DEBUG     uint8 = 7
)

type _MsgStatusText struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgStatusText) Text() string {
	return t.text
}

func (t *_MsgStatusText) Name() string {
	return t.name
}

func (t *_MsgStatusText) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgStatusText) NewMessage() ros.Message {
	m := new(StatusText)

	return m
}

var (
	MsgStatusText = &_MsgStatusText{
		`# STATUSTEXT message representation
# https://mavlink.io/en/messages/common.html#STATUSTEXT

# Severity levels
uint8 EMERGENCY = 0
uint8 ALERT = 1
uint8 CRITICAL = 2
uint8 ERROR = 3
uint8 WARNING = 4
uint8 NOTICE = 5
uint8 INFO = 6
uint8 DEBUG = 7

# Fields
std_msgs/Header header
uint8 severity
string text
`,
		"mavros_msgs/StatusText",
		"6cfd33cd09e4abf5841d7be3c770a969",
	}
)

type StatusText struct {
	Header   std_msgs.Header
	Severity uint8
	Text     string
}

func (m *StatusText) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.Severity); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "string", &m.Text); err != nil {
		return err
	}

	return
}

func (m *StatusText) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	// Severity
	if err = ros.DeserializeMessageField(r, "uint8", &m.Severity); err != nil {
		return err
	}

	// Text
	if err = ros.DeserializeMessageField(r, "string", &m.Text); err != nil {
		return err
	}

	return
}
