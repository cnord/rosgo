// Code generated by ros-gen-go.
// source: ActuatorControl.msg
// DO NOT EDIT!
package mavros_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

const (
	PX4_MIX_FLIGHT_CONTROL          uint8 = 0
	PX4_MIX_FLIGHT_CONTROL_VTOL_ALT uint8 = 1
	PX4_MIX_PAYLOAD                 uint8 = 2
	PX4_MIX_MANUAL_PASSTHROUGH      uint8 = 3
)

type _MsgActuatorControl struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgActuatorControl) Text() string {
	return t.text
}

func (t *_MsgActuatorControl) Name() string {
	return t.name
}

func (t *_MsgActuatorControl) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgActuatorControl) NewMessage() ros.Message {
	m := new(ActuatorControl)

	return m
}

var (
	MsgActuatorControl = &_MsgActuatorControl{
		`# raw servo values for direct actuator controls
#
# about groups, mixing and channels:
# https://pixhawk.org/dev/mixing

# constant for mixer group
uint8 PX4_MIX_FLIGHT_CONTROL = 0
uint8 PX4_MIX_FLIGHT_CONTROL_VTOL_ALT = 1
uint8 PX4_MIX_PAYLOAD = 2
uint8 PX4_MIX_MANUAL_PASSTHROUGH = 3
#uint8 PX4_MIX_FC_MC_VIRT = 4
#uint8 PX4_MIX_FC_FW_VIRT = 5

std_msgs/Header header
uint8 group_mix
float32[8] controls
`,
		"mavros_msgs/ActuatorControl",
		"9eea0a80c88944fe2fb67f3b3768854b",
	}
)

type ActuatorControl struct {
	Header   std_msgs.Header
	GroupMix uint8
	Controls [8]float32
}

func (m *ActuatorControl) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.GroupMix); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Controls)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Controls {
		if err = ros.SerializeMessageField(w, "float32", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *ActuatorControl) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	// GroupMix
	if err = ros.DeserializeMessageField(r, "uint8", &m.GroupMix); err != nil {
		return err
	}

	// Controls
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Controls: %s", err)
		}
		if size > 8 {
			return fmt.Errorf("array size for Controls too large: expected=8, got=%d", size)
		}
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float32", &m.Controls[i]); err != nil {
				return err
			}
		}
	}

	return
}
