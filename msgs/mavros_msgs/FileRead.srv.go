// Code generated by ros-gen-go.
// source: FileRead.srv
// DO NOT EDIT!
package mavros_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

// Service type metadata
type _SrvFileRead struct {
	name    string
	md5sum  string
	text    string
	reqType ros.MessageType
	resType ros.MessageType
}

func (t *_SrvFileRead) Name() string                  { return t.name }
func (t *_SrvFileRead) MD5Sum() string                { return t.md5sum }
func (t *_SrvFileRead) Text() string                  { return t.text }
func (t *_SrvFileRead) RequestType() ros.MessageType  { return t.reqType }
func (t *_SrvFileRead) ResponseType() ros.MessageType { return t.resType }
func (t *_SrvFileRead) NewService() ros.Service {
	return new(FileRead)
}

var (
	SrvFileRead = &_SrvFileRead{
		"mavros_msgs/FileRead",
		"7700526a6a54d8971e0db6dc1d712523",
		`# FTP::Read
#
# Call FTP::Open first.
# :success:	indicates success end of request
# :r_errno:	remote errno if applicapable

string file_path
uint64 offset
uint64 size
---
uint8[] data
bool success
int32 r_errno
`,
		MsgFileReadRequest,
		MsgFileReadResponse,
	}
)

type FileRead struct {
	Request  FileReadRequest
	Response FileReadResponse
}

func (s *FileRead) ReqMessage() ros.Message { return &s.Request }
func (s *FileRead) ResMessage() ros.Message { return &s.Response }

// FileReadRequest

type _MsgFileReadRequest struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgFileReadRequest) Text() string {
	return t.text
}

func (t *_MsgFileReadRequest) Name() string {
	return t.name
}

func (t *_MsgFileReadRequest) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgFileReadRequest) NewMessage() ros.Message {
	m := new(FileReadRequest)

	return m
}

var (
	MsgFileReadRequest = &_MsgFileReadRequest{
		`# FTP::Read
#
# Call FTP::Open first.
# :success:	indicates success end of request
# :r_errno:	remote errno if applicapable

string file_path
uint64 offset
uint64 size
`,
		"mavros_msgs/FileReadRequest",
		"7700526a6a54d8971e0db6dc1d712523",
	}
)

type FileReadRequest struct {
	FilePath string
	Offset   uint64
	Size     uint64
}

func (m *FileReadRequest) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "string", &m.FilePath); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint64", &m.Offset); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint64", &m.Size); err != nil {
		return err
	}

	return
}

func (m *FileReadRequest) Deserialize(r io.Reader) (err error) {
	// FilePath
	if err = ros.DeserializeMessageField(r, "string", &m.FilePath); err != nil {
		return err
	}

	// Offset
	if err = ros.DeserializeMessageField(r, "uint64", &m.Offset); err != nil {
		return err
	}

	// Size
	if err = ros.DeserializeMessageField(r, "uint64", &m.Size); err != nil {
		return err
	}

	return
}

// FileReadResponse

type _MsgFileReadResponse struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgFileReadResponse) Text() string {
	return t.text
}

func (t *_MsgFileReadResponse) Name() string {
	return t.name
}

func (t *_MsgFileReadResponse) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgFileReadResponse) NewMessage() ros.Message {
	m := new(FileReadResponse)

	return m
}

var (
	MsgFileReadResponse = &_MsgFileReadResponse{
		`
uint8[] data
bool success
int32 r_errno
`,
		"mavros_msgs/FileReadResponse",
		"7700526a6a54d8971e0db6dc1d712523",
	}
)

type FileReadResponse struct {
	Data    []uint8
	Success bool
	RErrno  int32
}

func (m *FileReadResponse) Serialize(w io.Writer) (err error) {
	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Data)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Data {
		if err = ros.SerializeMessageField(w, "uint8", &elem); err != nil {
			return err
		}
	}

	if err = ros.SerializeMessageField(w, "bool", &m.Success); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "int32", &m.RErrno); err != nil {
		return err
	}

	return
}

func (m *FileReadResponse) Deserialize(r io.Reader) (err error) {
	// Data
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Data: %s", err)
		}
		m.Data = make([]uint8, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "uint8", &m.Data[i]); err != nil {
				return err
			}
		}
	}

	// Success
	if err = ros.DeserializeMessageField(r, "bool", &m.Success); err != nil {
		return err
	}

	// RErrno
	if err = ros.DeserializeMessageField(r, "int32", &m.RErrno); err != nil {
		return err
	}

	return
}
