// Code generated by ros-gen-go.
// source: RTCM.msg
// DO NOT EDIT!
package mavros_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgRTCM struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgRTCM) Text() string {
	return t.text
}

func (t *_MsgRTCM) Name() string {
	return t.name
}

func (t *_MsgRTCM) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgRTCM) NewMessage() ros.Message {
	m := new(RTCM)

	return m
}

var (
	MsgRTCM = &_MsgRTCM{
		`# RTCM message for the gps_rtk plugin
# The gps_rtk plugin will fragment the data if necessary and 
# forward it to the FCU via Mavlink through the available link.
# data should be <= 4*180, higher will be discarded.
std_msgs/Header header
uint8[] data
`,
		"mavros_msgs/RTCM",
		"8903b686ebe5db3477e83c6d0bb149f8",
	}
)

type RTCM struct {
	Header std_msgs.Header
	Data   []uint8
}

func (m *RTCM) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Data)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Data {
		if err = ros.SerializeMessageField(w, "uint8", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *RTCM) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	// Data
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Data: %s", err)
		}
		m.Data = make([]uint8, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "uint8", &m.Data[i]); err != nil {
				return err
			}
		}
	}

	return
}
