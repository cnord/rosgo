// Code generated by ros-gen-go.
// source: DebugValue.msg
// DO NOT EDIT!
package mavros_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

const (
	DebugValue_TYPE_DEBUG             uint8 = 0
	DebugValue_TYPE_DEBUG_VECT        uint8 = 1
	DebugValue_TYPE_DEBUG_ARRAY       uint8 = 2
	DebugValue_TYPE_NAMED_VALUE_FLOAT uint8 = 3
	DebugValue_TYPE_NAMED_VALUE_INT   uint8 = 4
)

type _MsgDebugValue struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgDebugValue) Text() string {
	return t.text
}

func (t *_MsgDebugValue) Name() string {
	return t.name
}

func (t *_MsgDebugValue) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgDebugValue) NewMessage() ros.Message {
	m := new(DebugValue)

	return m
}

var (
	MsgDebugValue = &_MsgDebugValue{
		`# Msg for Debug MAVLink API
#
# Supported types:
# DEBUG			https://mavlink.io/en/messages/common.html#DEBUG
# DEBUG_VECTOR			https://mavlink.io/en/messages/common.html#DEBUG_VECT
# NAMED_VALUE_FLOAT		https://mavlink.io/en/messages/common.html#NAMED_VALUE_FLOAT
# NAMED_VALUE_INT		https://mavlink.io/en/messages/common.html#NAMED_VALUE_INT
# @TODO: add support for DEBUG_ARRAY (https://github.com/mavlink/mavlink/pull/734)

std_msgs/Header header

int32 index			# index value of DEBUG value (-1 if not indexed)

string name			# value name/key

float32 value_float		# float value for NAMED_VALUE_FLOAT and DEBUG
int32 value_int		# int value for NAMED_VALUE_INT
float32[] data			# DEBUG vector or array

uint8 type
uint8 TYPE_DEBUG		= 0
uint8 TYPE_DEBUG_VECT		= 1
uint8 TYPE_DEBUG_ARRAY		= 2
uint8 TYPE_NAMED_VALUE_FLOAT	= 3
uint8 TYPE_NAMED_VALUE_INT	= 4
`,
		"mavros_msgs/DebugValue",
		"af412ff7223c64155e7e3c6b7508eaaa",
	}
)

type DebugValue struct {
	Header     std_msgs.Header
	Index      int32
	Name       string
	ValueFloat float32
	ValueInt   int32
	Data       []float32
	Type       uint8
}

func (m *DebugValue) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "int32", &m.Index); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "string", &m.Name); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.ValueFloat); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "int32", &m.ValueInt); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Data)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Data {
		if err = ros.SerializeMessageField(w, "float32", &elem); err != nil {
			return err
		}
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.Type); err != nil {
		return err
	}

	return
}

func (m *DebugValue) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	// Index
	if err = ros.DeserializeMessageField(r, "int32", &m.Index); err != nil {
		return err
	}

	// Name
	if err = ros.DeserializeMessageField(r, "string", &m.Name); err != nil {
		return err
	}

	// ValueFloat
	if err = ros.DeserializeMessageField(r, "float32", &m.ValueFloat); err != nil {
		return err
	}

	// ValueInt
	if err = ros.DeserializeMessageField(r, "int32", &m.ValueInt); err != nil {
		return err
	}

	// Data
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Data: %s", err)
		}
		m.Data = make([]float32, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float32", &m.Data[i]); err != nil {
				return err
			}
		}
	}

	// Type
	if err = ros.DeserializeMessageField(r, "uint8", &m.Type); err != nil {
		return err
	}

	return
}
