// Code generated by ros-gen-go.
// source: StreamRate.srv
// DO NOT EDIT!
package mavros_msgs

import (
	"io"

	"github.com/cnord/rosgo/ros"
)

// Service type metadata
type _SrvStreamRate struct {
	name    string
	md5sum  string
	text    string
	reqType ros.MessageType
	resType ros.MessageType
}

func (t *_SrvStreamRate) Name() string                  { return t.name }
func (t *_SrvStreamRate) MD5Sum() string                { return t.md5sum }
func (t *_SrvStreamRate) Text() string                  { return t.text }
func (t *_SrvStreamRate) RequestType() ros.MessageType  { return t.reqType }
func (t *_SrvStreamRate) ResponseType() ros.MessageType { return t.resType }
func (t *_SrvStreamRate) NewService() ros.Service {
	return new(StreamRate)
}

var (
	SrvStreamRate = &_SrvStreamRate{
		"mavros_msgs/StreamRate",
		"d12f7661724c8ba25f67ba597bb7d039",
		`# sets stream rate
# See REQUEST_DATA_STREAM message

uint8 STREAM_ALL = 0
uint8 STREAM_RAW_SENSORS = 1
uint8 STREAM_EXTENDED_STATUS = 2
uint8 STREAM_RC_CHANNELS = 3
uint8 STREAM_RAW_CONTROLLER = 4
uint8 STREAM_POSITION = 6
uint8 STREAM_EXTRA1 = 10
uint8 STREAM_EXTRA2 = 11
uint8 STREAM_EXTRA3 = 12

uint8 stream_id
uint16 message_rate
bool on_off
---
`,
		MsgStreamRateRequest,
		MsgStreamRateResponse,
	}
)

type StreamRate struct {
	Request  StreamRateRequest
	Response StreamRateResponse
}

func (s *StreamRate) ReqMessage() ros.Message { return &s.Request }
func (s *StreamRate) ResMessage() ros.Message { return &s.Response }

// StreamRateRequest

const (
	STREAM_ALL             uint8 = 0
	STREAM_RAW_SENSORS     uint8 = 1
	STREAM_EXTENDED_STATUS uint8 = 2
	STREAM_RC_CHANNELS     uint8 = 3
	STREAM_RAW_CONTROLLER  uint8 = 4
	STREAM_POSITION        uint8 = 6
	STREAM_EXTRA1          uint8 = 10
	STREAM_EXTRA2          uint8 = 11
	STREAM_EXTRA3          uint8 = 12
)

type _MsgStreamRateRequest struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgStreamRateRequest) Text() string {
	return t.text
}

func (t *_MsgStreamRateRequest) Name() string {
	return t.name
}

func (t *_MsgStreamRateRequest) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgStreamRateRequest) NewMessage() ros.Message {
	m := new(StreamRateRequest)

	return m
}

var (
	MsgStreamRateRequest = &_MsgStreamRateRequest{
		`# sets stream rate
# See REQUEST_DATA_STREAM message

uint8 STREAM_ALL = 0
uint8 STREAM_RAW_SENSORS = 1
uint8 STREAM_EXTENDED_STATUS = 2
uint8 STREAM_RC_CHANNELS = 3
uint8 STREAM_RAW_CONTROLLER = 4
uint8 STREAM_POSITION = 6
uint8 STREAM_EXTRA1 = 10
uint8 STREAM_EXTRA2 = 11
uint8 STREAM_EXTRA3 = 12

uint8 stream_id
uint16 message_rate
bool on_off
`,
		"mavros_msgs/StreamRateRequest",
		"",
	}
)

type StreamRateRequest struct {
	StreamId    uint8
	MessageRate uint16
	OnOff       bool
}

func (m *StreamRateRequest) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "uint8", &m.StreamId); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint16", &m.MessageRate); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "bool", &m.OnOff); err != nil {
		return err
	}

	return
}

func (m *StreamRateRequest) Deserialize(r io.Reader) (err error) {
	// StreamId
	if err = ros.DeserializeMessageField(r, "uint8", &m.StreamId); err != nil {
		return err
	}

	// MessageRate
	if err = ros.DeserializeMessageField(r, "uint16", &m.MessageRate); err != nil {
		return err
	}

	// OnOff
	if err = ros.DeserializeMessageField(r, "bool", &m.OnOff); err != nil {
		return err
	}

	return
}

// StreamRateResponse

type _MsgStreamRateResponse struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgStreamRateResponse) Text() string {
	return t.text
}

func (t *_MsgStreamRateResponse) Name() string {
	return t.name
}

func (t *_MsgStreamRateResponse) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgStreamRateResponse) NewMessage() ros.Message {
	m := new(StreamRateResponse)

	return m
}

var (
	MsgStreamRateResponse = &_MsgStreamRateResponse{
		`
`,
		"mavros_msgs/StreamRateResponse",
		"",
	}
)

type StreamRateResponse struct {
}

func (m *StreamRateResponse) Serialize(w io.Writer) (err error) {
	return
}

func (m *StreamRateResponse) Deserialize(r io.Reader) (err error) {
	return
}
