// Code generated by ros-gen-go.
// source: FileWrite.srv
// DO NOT EDIT!
package mavros_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

// Service type metadata
type _SrvFileWrite struct {
	name    string
	md5sum  string
	text    string
	reqType ros.MessageType
	resType ros.MessageType
}

func (t *_SrvFileWrite) Name() string                  { return t.name }
func (t *_SrvFileWrite) MD5Sum() string                { return t.md5sum }
func (t *_SrvFileWrite) Text() string                  { return t.text }
func (t *_SrvFileWrite) RequestType() ros.MessageType  { return t.reqType }
func (t *_SrvFileWrite) ResponseType() ros.MessageType { return t.resType }
func (t *_SrvFileWrite) NewService() ros.Service {
	return new(FileWrite)
}

var (
	SrvFileWrite = &_SrvFileWrite{
		"mavros_msgs/FileWrite",
		"7d7e0ed4d86797a80355795ee6728fac",
		`# FTP::Write
#
# Call FTP::Open first.
# :success:	indicates success end of request
# :r_errno:	remote errno if applicapable

string file_path
uint64 offset
uint8[] data
---
bool success
int32 r_errno
`,
		MsgFileWriteRequest,
		MsgFileWriteResponse,
	}
)

type FileWrite struct {
	Request  FileWriteRequest
	Response FileWriteResponse
}

func (s *FileWrite) ReqMessage() ros.Message { return &s.Request }
func (s *FileWrite) ResMessage() ros.Message { return &s.Response }

// FileWriteRequest

type _MsgFileWriteRequest struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgFileWriteRequest) Text() string {
	return t.text
}

func (t *_MsgFileWriteRequest) Name() string {
	return t.name
}

func (t *_MsgFileWriteRequest) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgFileWriteRequest) NewMessage() ros.Message {
	m := new(FileWriteRequest)

	return m
}

var (
	MsgFileWriteRequest = &_MsgFileWriteRequest{
		`# FTP::Write
#
# Call FTP::Open first.
# :success:	indicates success end of request
# :r_errno:	remote errno if applicapable

string file_path
uint64 offset
uint8[] data
`,
		"mavros_msgs/FileWriteRequest",
		"",
	}
)

type FileWriteRequest struct {
	FilePath string
	Offset   uint64
	Data     []uint8
}

func (m *FileWriteRequest) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "string", &m.FilePath); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint64", &m.Offset); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Data)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Data {
		if err = ros.SerializeMessageField(w, "uint8", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *FileWriteRequest) Deserialize(r io.Reader) (err error) {
	// FilePath
	if err = ros.DeserializeMessageField(r, "string", &m.FilePath); err != nil {
		return err
	}

	// Offset
	if err = ros.DeserializeMessageField(r, "uint64", &m.Offset); err != nil {
		return err
	}

	// Data
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Data: %s", err)
		}
		m.Data = make([]uint8, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "uint8", &m.Data[i]); err != nil {
				return err
			}
		}
	}

	return
}

// FileWriteResponse

type _MsgFileWriteResponse struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgFileWriteResponse) Text() string {
	return t.text
}

func (t *_MsgFileWriteResponse) Name() string {
	return t.name
}

func (t *_MsgFileWriteResponse) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgFileWriteResponse) NewMessage() ros.Message {
	m := new(FileWriteResponse)

	return m
}

var (
	MsgFileWriteResponse = &_MsgFileWriteResponse{
		`
bool success
int32 r_errno
`,
		"mavros_msgs/FileWriteResponse",
		"",
	}
)

type FileWriteResponse struct {
	Success bool
	RErrno  int32
}

func (m *FileWriteResponse) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "bool", &m.Success); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "int32", &m.RErrno); err != nil {
		return err
	}

	return
}

func (m *FileWriteResponse) Deserialize(r io.Reader) (err error) {
	// Success
	if err = ros.DeserializeMessageField(r, "bool", &m.Success); err != nil {
		return err
	}

	// RErrno
	if err = ros.DeserializeMessageField(r, "int32", &m.RErrno); err != nil {
		return err
	}

	return
}
