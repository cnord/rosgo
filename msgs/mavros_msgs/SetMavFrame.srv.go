// Code generated by ros-gen-go.
// source: SetMavFrame.srv
// DO NOT EDIT!
package mavros_msgs

import (
	"io"

	"github.com/cnord/rosgo/ros"
)

// Service type metadata
type _SrvSetMavFrame struct {
	name    string
	md5sum  string
	text    string
	reqType ros.MessageType
	resType ros.MessageType
}

func (t *_SrvSetMavFrame) Name() string                  { return t.name }
func (t *_SrvSetMavFrame) MD5Sum() string                { return t.md5sum }
func (t *_SrvSetMavFrame) Text() string                  { return t.text }
func (t *_SrvSetMavFrame) RequestType() ros.MessageType  { return t.reqType }
func (t *_SrvSetMavFrame) ResponseType() ros.MessageType { return t.resType }
func (t *_SrvSetMavFrame) NewService() ros.Service {
	return new(SetMavFrame)
}

var (
	SrvSetMavFrame = &_SrvSetMavFrame{
		"mavros_msgs/SetMavFrame",
		"b3a2bd45b8f5b4491f314b90b7a1c7b2",
		`# Set MAV_FRAME for setpoints

# [[[cog:
# from pymavlink.dialects.v20 import common
#
# def decl_enum(ename, pfx='', bsz=8):
#     enum = sorted(common.enums[ename].items())
#     enum.pop() # remove ENUM_END
#
#     cog.outl("# " + ename)
#     for k, e in enum:
#         sn = e.name[len(ename) + 1:]
#         l = "uint{bsz} {pfx}{sn} = {k}".format(**locals())
#         if e.description:
#             l += ' ' * (40 - len(l)) + ' # ' + e.description
#         cog.outl(l)
#
# decl_enum('MAV_FRAME', 'FRAME_')
# ]]]
# MAV_FRAME
uint8 FRAME_GLOBAL = 0                   # Global coordinate frame, WGS84 coordinate system. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL)
uint8 FRAME_LOCAL_NED = 1                # Local coordinate frame, Z-up (x: north, y: east, z: down).
uint8 FRAME_MISSION = 2                  # NOT a coordinate frame, indicates a mission command.
uint8 FRAME_GLOBAL_RELATIVE_ALT = 3      # Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location.
uint8 FRAME_LOCAL_ENU = 4                # Local coordinate frame, Z-down (x: east, y: north, z: up)
uint8 FRAME_GLOBAL_INT = 5               # Global coordinate frame, WGS84 coordinate system. First value / x: latitude in degrees*1.0e-7, second value / y: longitude in degrees*1.0e-7, third value / z: positive altitude over mean sea level (MSL)
uint8 FRAME_GLOBAL_RELATIVE_ALT_INT = 6  # Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude with 0 being at the altitude of the home location.
uint8 FRAME_LOCAL_OFFSET_NED = 7         # Offset to the current local frame. Anything expressed in this frame should be added to the current local frame position.
uint8 FRAME_BODY_NED = 8                 # Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.
uint8 FRAME_BODY_OFFSET_NED = 9          # Offset in body NED frame. This makes sense if adding setpoints to the current flight path, to avoid an obstacle - e.g. useful to command 2 m/s^2 acceleration to the east.
uint8 FRAME_GLOBAL_TERRAIN_ALT = 10      # Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
uint8 FRAME_GLOBAL_TERRAIN_ALT_INT = 11  # Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
# [[[end]]] (checksum: e1f224cdf07c92a4457f1a880abdc0ff)

uint8 mav_frame
---
bool success
`,
		MsgSetMavFrameRequest,
		MsgSetMavFrameResponse,
	}
)

type SetMavFrame struct {
	Request  SetMavFrameRequest
	Response SetMavFrameResponse
}

func (s *SetMavFrame) ReqMessage() ros.Message { return &s.Request }
func (s *SetMavFrame) ResMessage() ros.Message { return &s.Response }

// SetMavFrameRequest

const (
	SetMavFrameRequest_FRAME_GLOBAL                  uint8 = 0
	SetMavFrameRequest_FRAME_LOCAL_NED               uint8 = 1
	SetMavFrameRequest_FRAME_MISSION                 uint8 = 2
	SetMavFrameRequest_FRAME_GLOBAL_RELATIVE_ALT     uint8 = 3
	SetMavFrameRequest_FRAME_LOCAL_ENU               uint8 = 4
	SetMavFrameRequest_FRAME_GLOBAL_INT              uint8 = 5
	SetMavFrameRequest_FRAME_GLOBAL_RELATIVE_ALT_INT uint8 = 6
	SetMavFrameRequest_FRAME_LOCAL_OFFSET_NED        uint8 = 7
	SetMavFrameRequest_FRAME_BODY_NED                uint8 = 8
	SetMavFrameRequest_FRAME_BODY_OFFSET_NED         uint8 = 9
	SetMavFrameRequest_FRAME_GLOBAL_TERRAIN_ALT      uint8 = 10
	SetMavFrameRequest_FRAME_GLOBAL_TERRAIN_ALT_INT  uint8 = 11
)

type _MsgSetMavFrameRequest struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgSetMavFrameRequest) Text() string {
	return t.text
}

func (t *_MsgSetMavFrameRequest) Name() string {
	return t.name
}

func (t *_MsgSetMavFrameRequest) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgSetMavFrameRequest) NewMessage() ros.Message {
	m := new(SetMavFrameRequest)

	return m
}

var (
	MsgSetMavFrameRequest = &_MsgSetMavFrameRequest{
		`# Set MAV_FRAME for setpoints

# [[[cog:
# from pymavlink.dialects.v20 import common
#
# def decl_enum(ename, pfx='', bsz=8):
#     enum = sorted(common.enums[ename].items())
#     enum.pop() # remove ENUM_END
#
#     cog.outl("# " + ename)
#     for k, e in enum:
#         sn = e.name[len(ename) + 1:]
#         l = "uint{bsz} {pfx}{sn} = {k}".format(**locals())
#         if e.description:
#             l += ' ' * (40 - len(l)) + ' # ' + e.description
#         cog.outl(l)
#
# decl_enum('MAV_FRAME', 'FRAME_')
# ]]]
# MAV_FRAME
uint8 FRAME_GLOBAL = 0                   # Global coordinate frame, WGS84 coordinate system. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL)
uint8 FRAME_LOCAL_NED = 1                # Local coordinate frame, Z-up (x: north, y: east, z: down).
uint8 FRAME_MISSION = 2                  # NOT a coordinate frame, indicates a mission command.
uint8 FRAME_GLOBAL_RELATIVE_ALT = 3      # Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location.
uint8 FRAME_LOCAL_ENU = 4                # Local coordinate frame, Z-down (x: east, y: north, z: up)
uint8 FRAME_GLOBAL_INT = 5               # Global coordinate frame, WGS84 coordinate system. First value / x: latitude in degrees*1.0e-7, second value / y: longitude in degrees*1.0e-7, third value / z: positive altitude over mean sea level (MSL)
uint8 FRAME_GLOBAL_RELATIVE_ALT_INT = 6  # Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude with 0 being at the altitude of the home location.
uint8 FRAME_LOCAL_OFFSET_NED = 7         # Offset to the current local frame. Anything expressed in this frame should be added to the current local frame position.
uint8 FRAME_BODY_NED = 8                 # Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.
uint8 FRAME_BODY_OFFSET_NED = 9          # Offset in body NED frame. This makes sense if adding setpoints to the current flight path, to avoid an obstacle - e.g. useful to command 2 m/s^2 acceleration to the east.
uint8 FRAME_GLOBAL_TERRAIN_ALT = 10      # Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
uint8 FRAME_GLOBAL_TERRAIN_ALT_INT = 11  # Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
# [[[end]]] (checksum: e1f224cdf07c92a4457f1a880abdc0ff)

uint8 mav_frame
`,
		"mavros_msgs/SetMavFrameRequest",
		"",
	}
)

type SetMavFrameRequest struct {
	MavFrame uint8
}

func (m *SetMavFrameRequest) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "uint8", &m.MavFrame); err != nil {
		return err
	}

	return
}

func (m *SetMavFrameRequest) Deserialize(r io.Reader) (err error) {
	// MavFrame
	if err = ros.DeserializeMessageField(r, "uint8", &m.MavFrame); err != nil {
		return err
	}

	return
}

// SetMavFrameResponse

type _MsgSetMavFrameResponse struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgSetMavFrameResponse) Text() string {
	return t.text
}

func (t *_MsgSetMavFrameResponse) Name() string {
	return t.name
}

func (t *_MsgSetMavFrameResponse) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgSetMavFrameResponse) NewMessage() ros.Message {
	m := new(SetMavFrameResponse)

	return m
}

var (
	MsgSetMavFrameResponse = &_MsgSetMavFrameResponse{
		`
bool success
`,
		"mavros_msgs/SetMavFrameResponse",
		"",
	}
)

type SetMavFrameResponse struct {
	Success bool
}

func (m *SetMavFrameResponse) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "bool", &m.Success); err != nil {
		return err
	}

	return
}

func (m *SetMavFrameResponse) Deserialize(r io.Reader) (err error) {
	// Success
	if err = ros.DeserializeMessageField(r, "bool", &m.Success); err != nil {
		return err
	}

	return
}
