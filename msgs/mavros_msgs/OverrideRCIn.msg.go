// Code generated by ros-gen-go.
// source: OverrideRCIn.msg
// DO NOT EDIT!
package mavros_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

const (
	CHAN_RELEASE  uint16 = 0
	CHAN_NOCHANGE uint16 = 65535
)

type _MsgOverrideRCIn struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgOverrideRCIn) Text() string {
	return t.text
}

func (t *_MsgOverrideRCIn) Name() string {
	return t.name
}

func (t *_MsgOverrideRCIn) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgOverrideRCIn) NewMessage() ros.Message {
	m := new(OverrideRCIn)

	return m
}

var (
	MsgOverrideRCIn = &_MsgOverrideRCIn{
		`# Override RC Input
# Currently MAVLink defines override for 8 channel

uint16 CHAN_RELEASE=0
uint16 CHAN_NOCHANGE=65535

uint16[8] channels
`,
		"mavros_msgs/OverrideRCIn",
		"73b27a463a40a3eda1f9fbb1fc86d6f3",
	}
)

type OverrideRCIn struct {
	Channels [8]uint16
}

func (m *OverrideRCIn) Serialize(w io.Writer) (err error) {
	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Channels)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Channels {
		if err = ros.SerializeMessageField(w, "uint16", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *OverrideRCIn) Deserialize(r io.Reader) (err error) {
	// Channels
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Channels: %s", err)
		}
		if size > 8 {
			return fmt.Errorf("array size for Channels too large: expected=8, got=%d", size)
		}
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "uint16", &m.Channels[i]); err != nil {
				return err
			}
		}
	}

	return
}
