// Code generated by ros-gen-go.
// source: RCIn.msg
// DO NOT EDIT!
package mavros_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgRCIn struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgRCIn) Text() string {
	return t.text
}

func (t *_MsgRCIn) Name() string {
	return t.name
}

func (t *_MsgRCIn) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgRCIn) NewMessage() ros.Message {
	m := new(RCIn)

	return m
}

var (
	MsgRCIn = &_MsgRCIn{
		`# RAW RC input state

std_msgs/Header header
uint8 rssi
uint16[] channels
`,
		"mavros_msgs/RCIn",
		"1c3eafdb5efbcda3c334e1788bbcfe39",
	}
)

type RCIn struct {
	Header   std_msgs.Header
	Rssi     uint8
	Channels []uint16
}

func (m *RCIn) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.Rssi); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Channels)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Channels {
		if err = ros.SerializeMessageField(w, "uint16", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *RCIn) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "std_msgs/Header", &m.Header); err != nil {
		return err
	}

	// Rssi
	if err = ros.DeserializeMessageField(r, "uint8", &m.Rssi); err != nil {
		return err
	}

	// Channels
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Channels: %s", err)
		}
		m.Channels = make([]uint16, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "uint16", &m.Channels[i]); err != nil {
				return err
			}
		}
	}

	return
}
