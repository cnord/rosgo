// Code generated by ros-gen-go.
// source: CommandInt.srv
// DO NOT EDIT!
package mavros_msgs

import (
	"io"

	"github.com/cnord/rosgo/ros"
)

// Service type metadata
type _SrvCommandInt struct {
	name    string
	md5sum  string
	text    string
	reqType ros.MessageType
	resType ros.MessageType
}

func (t *_SrvCommandInt) Name() string                  { return t.name }
func (t *_SrvCommandInt) MD5Sum() string                { return t.md5sum }
func (t *_SrvCommandInt) Text() string                  { return t.text }
func (t *_SrvCommandInt) RequestType() ros.MessageType  { return t.reqType }
func (t *_SrvCommandInt) ResponseType() ros.MessageType { return t.resType }
func (t *_SrvCommandInt) NewService() ros.Service {
	return new(CommandInt)
}

var (
	SrvCommandInt = &_SrvCommandInt{
		"mavros_msgs/CommandInt",
		"5d5fd287bf3d27ad6ec508b1692f3b09",
		`# Generic COMMAND_INT

bool broadcast # send this command in broadcast mode

uint8 frame
uint16 command
uint8 current
uint8 autocontinue
float32 param1
float32 param2
float32 param3
float32 param4
int32 x	# latitude in deg * 1E7 or local x * 1E4 m
int32 y	# longitude in deg * 1E7 or local y * 1E4 m
float32 z	# altitude
---
bool success
# seems that this message don't produce andy COMMAND_ACK messages
# so no result field
`,
		MsgCommandIntRequest,
		MsgCommandIntResponse,
	}
)

type CommandInt struct {
	Request  CommandIntRequest
	Response CommandIntResponse
}

func (s *CommandInt) ReqMessage() ros.Message { return &s.Request }
func (s *CommandInt) ResMessage() ros.Message { return &s.Response }

// CommandIntRequest

type _MsgCommandIntRequest struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgCommandIntRequest) Text() string {
	return t.text
}

func (t *_MsgCommandIntRequest) Name() string {
	return t.name
}

func (t *_MsgCommandIntRequest) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgCommandIntRequest) NewMessage() ros.Message {
	m := new(CommandIntRequest)

	return m
}

var (
	MsgCommandIntRequest = &_MsgCommandIntRequest{
		`# Generic COMMAND_INT

bool broadcast # send this command in broadcast mode

uint8 frame
uint16 command
uint8 current
uint8 autocontinue
float32 param1
float32 param2
float32 param3
float32 param4
int32 x	# latitude in deg * 1E7 or local x * 1E4 m
int32 y	# longitude in deg * 1E7 or local y * 1E4 m
float32 z	# altitude
`,
		"mavros_msgs/CommandIntRequest",
		"5d5fd287bf3d27ad6ec508b1692f3b09",
	}
)

type CommandIntRequest struct {
	Broadcast    bool
	Frame        uint8
	Command      uint16
	Current      uint8
	Autocontinue uint8
	Param1       float32
	Param2       float32
	Param3       float32
	Param4       float32
	X            int32
	Y            int32
	Z            float32
}

func (m *CommandIntRequest) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "bool", &m.Broadcast); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.Frame); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint16", &m.Command); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.Current); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.Autocontinue); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.Param1); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.Param2); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.Param3); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.Param4); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "int32", &m.X); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "int32", &m.Y); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.Z); err != nil {
		return err
	}

	return
}

func (m *CommandIntRequest) Deserialize(r io.Reader) (err error) {
	// Broadcast
	if err = ros.DeserializeMessageField(r, "bool", &m.Broadcast); err != nil {
		return err
	}

	// Frame
	if err = ros.DeserializeMessageField(r, "uint8", &m.Frame); err != nil {
		return err
	}

	// Command
	if err = ros.DeserializeMessageField(r, "uint16", &m.Command); err != nil {
		return err
	}

	// Current
	if err = ros.DeserializeMessageField(r, "uint8", &m.Current); err != nil {
		return err
	}

	// Autocontinue
	if err = ros.DeserializeMessageField(r, "uint8", &m.Autocontinue); err != nil {
		return err
	}

	// Param1
	if err = ros.DeserializeMessageField(r, "float32", &m.Param1); err != nil {
		return err
	}

	// Param2
	if err = ros.DeserializeMessageField(r, "float32", &m.Param2); err != nil {
		return err
	}

	// Param3
	if err = ros.DeserializeMessageField(r, "float32", &m.Param3); err != nil {
		return err
	}

	// Param4
	if err = ros.DeserializeMessageField(r, "float32", &m.Param4); err != nil {
		return err
	}

	// X
	if err = ros.DeserializeMessageField(r, "int32", &m.X); err != nil {
		return err
	}

	// Y
	if err = ros.DeserializeMessageField(r, "int32", &m.Y); err != nil {
		return err
	}

	// Z
	if err = ros.DeserializeMessageField(r, "float32", &m.Z); err != nil {
		return err
	}

	return
}

// CommandIntResponse

type _MsgCommandIntResponse struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgCommandIntResponse) Text() string {
	return t.text
}

func (t *_MsgCommandIntResponse) Name() string {
	return t.name
}

func (t *_MsgCommandIntResponse) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgCommandIntResponse) NewMessage() ros.Message {
	m := new(CommandIntResponse)

	return m
}

var (
	MsgCommandIntResponse = &_MsgCommandIntResponse{
		`
bool success
# seems that this message don't produce andy COMMAND_ACK messages
# so no result field
`,
		"mavros_msgs/CommandIntResponse",
		"5d5fd287bf3d27ad6ec508b1692f3b09",
	}
)

type CommandIntResponse struct {
	Success bool
}

func (m *CommandIntResponse) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "bool", &m.Success); err != nil {
		return err
	}

	return
}

func (m *CommandIntResponse) Deserialize(r io.Reader) (err error) {
	// Success
	if err = ros.DeserializeMessageField(r, "bool", &m.Success); err != nil {
		return err
	}

	return
}
