// Code generated by ros-gen-go.
// source: JointJog.msg
// DO NOT EDIT!
package control_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgJointJog struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgJointJog) Text() string {
	return t.text
}

func (t *_MsgJointJog) Name() string {
	return t.name
}

func (t *_MsgJointJog) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgJointJog) NewMessage() ros.Message {
	m := new(JointJog)

	return m
}

var (
	MsgJointJog = &_MsgJointJog{
		`# Used in time-stamping the message.
Header header

# Name list of the joints. You don't need to specify all joints of the
# robot. Joint names are case-sensitive.
string[] joint_names

# A position command to the joints listed in joint_names.
# The order must be identical.
# Units are meters or radians.
# If displacements and velocities are filled, a profiled motion is requested.
float64[] displacements # or position_deltas

# A velocity command to the joints listed in joint_names.
# The order must be identical.
# Units are m/s or rad/s.
# If displacements and velocities are filled, a profiled motion is requested.
float64[] velocities

float64 duration
`,
		"control_msgs/JointJog",
		"1685da700c8c2e1254afc92a5fb89c96",
	}
)

type JointJog struct {
	Header        std_msgs.Header
	JointNames    []string
	Displacements []float64
	Velocities    []float64
	Duration      float64
}

func (m *JointJog) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Header", &m.Header); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.JointNames)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.JointNames {
		if err = ros.SerializeMessageField(w, "string", &elem); err != nil {
			return err
		}
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Displacements)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Displacements {
		if err = ros.SerializeMessageField(w, "float64", &elem); err != nil {
			return err
		}
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Velocities)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Velocities {
		if err = ros.SerializeMessageField(w, "float64", &elem); err != nil {
			return err
		}
	}

	if err = ros.SerializeMessageField(w, "float64", &m.Duration); err != nil {
		return err
	}

	return
}

func (m *JointJog) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "Header", &m.Header); err != nil {
		return err
	}

	// JointNames
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for JointNames: %s", err)
		}
		m.JointNames = make([]string, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "string", &m.JointNames[i]); err != nil {
				return err
			}
		}
	}

	// Displacements
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Displacements: %s", err)
		}
		m.Displacements = make([]float64, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float64", &m.Displacements[i]); err != nil {
				return err
			}
		}
	}

	// Velocities
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Velocities: %s", err)
		}
		m.Velocities = make([]float64, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float64", &m.Velocities[i]); err != nil {
				return err
			}
		}
	}

	// Duration
	if err = ros.DeserializeMessageField(r, "float64", &m.Duration); err != nil {
		return err
	}

	return
}
