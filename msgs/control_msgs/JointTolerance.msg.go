// Code generated by ros-gen-go.
// source: JointTolerance.msg
// DO NOT EDIT!
package control_msgs

import (
	"io"

	"github.com/cnord/rosgo/ros"
)

type _MsgJointTolerance struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgJointTolerance) Text() string {
	return t.text
}

func (t *_MsgJointTolerance) Name() string {
	return t.name
}

func (t *_MsgJointTolerance) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgJointTolerance) NewMessage() ros.Message {
	m := new(JointTolerance)

	return m
}

var (
	MsgJointTolerance = &_MsgJointTolerance{
		`# The tolerances specify the amount the position, velocity, and
# accelerations can vary from the setpoints.  For example, in the case
# of trajectory control, when the actual position varies beyond
# (desired position + position tolerance), the trajectory goal may
# abort.
# 
# There are two special values for tolerances:
#  * 0 - The tolerance is unspecified and will remain at whatever the default is
#  * -1 - The tolerance is "erased".  If there was a default, the joint will be
#         allowed to move without restriction.

string name
float64 position  # in radians or meters (for a revolute or prismatic joint, respectively)
float64 velocity  # in rad/sec or m/sec
float64 acceleration  # in rad/sec^2 or m/sec^2
`,
		"control_msgs/JointTolerance",
		"f544fe9c16cf04547e135dd6063ff5be",
	}
)

type JointTolerance struct {
	Name         string
	Position     float64
	Velocity     float64
	Acceleration float64
}

func (m *JointTolerance) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "string", &m.Name); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float64", &m.Position); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float64", &m.Velocity); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float64", &m.Acceleration); err != nil {
		return err
	}

	return
}

func (m *JointTolerance) Deserialize(r io.Reader) (err error) {
	// Name
	if err = ros.DeserializeMessageField(r, "string", &m.Name); err != nil {
		return err
	}

	// Position
	if err = ros.DeserializeMessageField(r, "float64", &m.Position); err != nil {
		return err
	}

	// Velocity
	if err = ros.DeserializeMessageField(r, "float64", &m.Velocity); err != nil {
		return err
	}

	// Acceleration
	if err = ros.DeserializeMessageField(r, "float64", &m.Acceleration); err != nil {
		return err
	}

	return
}
