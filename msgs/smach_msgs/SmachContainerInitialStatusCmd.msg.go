// Code generated by ros-gen-go.
// source: SmachContainerInitialStatusCmd.msg
// DO NOT EDIT!
package smach_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

type _MsgSmachContainerInitialStatusCmd struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgSmachContainerInitialStatusCmd) Text() string {
	return t.text
}

func (t *_MsgSmachContainerInitialStatusCmd) Name() string {
	return t.name
}

func (t *_MsgSmachContainerInitialStatusCmd) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgSmachContainerInitialStatusCmd) NewMessage() ros.Message {
	m := new(SmachContainerInitialStatusCmd)

	return m
}

var (
	MsgSmachContainerInitialStatusCmd = &_MsgSmachContainerInitialStatusCmd{
		`# The path to the node in the server
string path

# The desired initial state(s)
string[] initial_states

# Initial values for the local user data of the state machine
# A pickled user data structure
# i.e. the UserData's internal dictionary
string local_data
`,
		"smach_msgs/SmachContainerInitialStatusCmd",
		"45f8cf31fc29b829db77f23001f788d6",
	}
)

type SmachContainerInitialStatusCmd struct {
	Path          string
	InitialStates []string
	LocalData     string
}

func (m *SmachContainerInitialStatusCmd) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "string", &m.Path); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.InitialStates)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.InitialStates {
		if err = ros.SerializeMessageField(w, "string", &elem); err != nil {
			return err
		}
	}

	if err = ros.SerializeMessageField(w, "string", &m.LocalData); err != nil {
		return err
	}

	return
}

func (m *SmachContainerInitialStatusCmd) Deserialize(r io.Reader) (err error) {
	// Path
	if err = ros.DeserializeMessageField(r, "string", &m.Path); err != nil {
		return err
	}

	// InitialStates
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for InitialStates: %s", err)
		}
		m.InitialStates = make([]string, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "string", &m.InitialStates[i]); err != nil {
				return err
			}
		}
	}

	// LocalData
	if err = ros.DeserializeMessageField(r, "string", &m.LocalData); err != nil {
		return err
	}

	return
}
