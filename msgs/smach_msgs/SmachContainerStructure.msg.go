// Code generated by ros-gen-go.
// source: SmachContainerStructure.msg
// DO NOT EDIT!
package smach_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgSmachContainerStructure struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgSmachContainerStructure) Text() string {
	return t.text
}

func (t *_MsgSmachContainerStructure) Name() string {
	return t.name
}

func (t *_MsgSmachContainerStructure) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgSmachContainerStructure) NewMessage() ros.Message {
	m := new(SmachContainerStructure)

	return m
}

var (
	MsgSmachContainerStructure = &_MsgSmachContainerStructure{
		`Header header

# The path to this node in the server
string path

# The children of this node
string[] children

# The outcome edges
# Each index across these arrays denote one edge
string[] internal_outcomes
string[] outcomes_from
string[] outcomes_to

# The potential outcomes from this container
string[] container_outcomes
`,
		"smach_msgs/SmachContainerStructure",
		"3d3d1e0d0f99779ee9e58101a5dcf7ea",
	}
)

type SmachContainerStructure struct {
	Header            std_msgs.Header
	Path              string
	Children          []string
	InternalOutcomes  []string
	OutcomesFrom      []string
	OutcomesTo        []string
	ContainerOutcomes []string
}

func (m *SmachContainerStructure) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "string", &m.Path); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Children)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Children {
		if err = ros.SerializeMessageField(w, "string", &elem); err != nil {
			return err
		}
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.InternalOutcomes)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.InternalOutcomes {
		if err = ros.SerializeMessageField(w, "string", &elem); err != nil {
			return err
		}
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.OutcomesFrom)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.OutcomesFrom {
		if err = ros.SerializeMessageField(w, "string", &elem); err != nil {
			return err
		}
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.OutcomesTo)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.OutcomesTo {
		if err = ros.SerializeMessageField(w, "string", &elem); err != nil {
			return err
		}
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.ContainerOutcomes)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.ContainerOutcomes {
		if err = ros.SerializeMessageField(w, "string", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *SmachContainerStructure) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "Header", &m.Header); err != nil {
		return err
	}

	// Path
	if err = ros.DeserializeMessageField(r, "string", &m.Path); err != nil {
		return err
	}

	// Children
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Children: %s", err)
		}
		m.Children = make([]string, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "string", &m.Children[i]); err != nil {
				return err
			}
		}
	}

	// InternalOutcomes
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for InternalOutcomes: %s", err)
		}
		m.InternalOutcomes = make([]string, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "string", &m.InternalOutcomes[i]); err != nil {
				return err
			}
		}
	}

	// OutcomesFrom
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for OutcomesFrom: %s", err)
		}
		m.OutcomesFrom = make([]string, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "string", &m.OutcomesFrom[i]); err != nil {
				return err
			}
		}
	}

	// OutcomesTo
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for OutcomesTo: %s", err)
		}
		m.OutcomesTo = make([]string, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "string", &m.OutcomesTo[i]); err != nil {
				return err
			}
		}
	}

	// ContainerOutcomes
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for ContainerOutcomes: %s", err)
		}
		m.ContainerOutcomes = make([]string, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "string", &m.ContainerOutcomes[i]); err != nil {
				return err
			}
		}
	}

	return
}
