// Code generated by ros-gen-go.
// source: Plane.msg
// DO NOT EDIT!
package shape_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

type _MsgPlane struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgPlane) Text() string {
	return t.text
}

func (t *_MsgPlane) Name() string {
	return t.name
}

func (t *_MsgPlane) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgPlane) NewMessage() ros.Message {
	m := new(Plane)

	return m
}

var (
	MsgPlane = &_MsgPlane{
		`# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef
`,
		"shape_msgs/Plane",
		"2c1b92ed8f31492f8e73f6a4a44ca796",
	}
)

type Plane struct {
	Coef [4]float64
}

func (m *Plane) Serialize(w io.Writer) (err error) {
	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Coef)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Coef {
		if err = ros.SerializeMessageField(w, "float64", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *Plane) Deserialize(r io.Reader) (err error) {
	// Coef
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Coef: %s", err)
		}
		if size > 4 {
			return fmt.Errorf("array size for Coef too large: expected=4, got=%d", size)
		}
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float64", &m.Coef[i]); err != nil {
				return err
			}
		}
	}

	return
}
