// Code generated by ros-gen-go.
// source: Mesh.msg
// DO NOT EDIT!
package shape_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/geometry_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgMesh struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgMesh) Text() string {
	return t.text
}

func (t *_MsgMesh) Name() string {
	return t.name
}

func (t *_MsgMesh) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgMesh) NewMessage() ros.Message {
	m := new(Mesh)

	return m
}

var (
	MsgMesh = &_MsgMesh{
		`# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices
`,
		"shape_msgs/Mesh",
		"1ffdae9486cd3316a121c578b47a85cc",
	}
)

type Mesh struct {
	Triangles []MeshTriangle
	Vertices  []geometry_msgs.Point
}

func (m *Mesh) Serialize(w io.Writer) (err error) {
	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Triangles)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Triangles {
		if err = ros.SerializeMessageField(w, "MeshTriangle", &elem); err != nil {
			return err
		}
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Vertices)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Vertices {
		if err = ros.SerializeMessageField(w, "geometry_msgs/Point", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *Mesh) Deserialize(r io.Reader) (err error) {
	// Triangles
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Triangles: %s", err)
		}
		m.Triangles = make([]MeshTriangle, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "MeshTriangle", &m.Triangles[i]); err != nil {
				return err
			}
		}
	}

	// Vertices
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Vertices: %s", err)
		}
		m.Vertices = make([]geometry_msgs.Point, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "geometry_msgs/Point", &m.Vertices[i]); err != nil {
				return err
			}
		}
	}

	return
}
