// Code generated by ros-gen-go.
// source: PoseWithCovariance.msg
// DO NOT EDIT!
package geometry_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

type _MsgPoseWithCovariance struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgPoseWithCovariance) Text() string {
	return t.text
}

func (t *_MsgPoseWithCovariance) Name() string {
	return t.name
}

func (t *_MsgPoseWithCovariance) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgPoseWithCovariance) NewMessage() ros.Message {
	m := new(PoseWithCovariance)

	return m
}

var (
	MsgPoseWithCovariance = &_MsgPoseWithCovariance{
		`# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance
`,
		"geometry_msgs/PoseWithCovariance",
		"c23e848cf1b7533a8d7c259073a97e6f",
	}
)

type PoseWithCovariance struct {
	Pose       Pose
	Covariance [36]float64
}

func (m *PoseWithCovariance) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Pose", &m.Pose); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Covariance)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Covariance {
		if err = ros.SerializeMessageField(w, "float64", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *PoseWithCovariance) Deserialize(r io.Reader) (err error) {
	// Pose
	if err = ros.DeserializeMessageField(r, "Pose", &m.Pose); err != nil {
		return err
	}

	// Covariance
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Covariance: %s", err)
		}
		if size > 36 {
			return fmt.Errorf("array size for Covariance too large: expected=36, got=%d", size)
		}
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float64", &m.Covariance[i]); err != nil {
				return err
			}
		}
	}

	return
}
