// Code generated by ros-gen-go.
// source: Polygon.msg
// DO NOT EDIT!
package geometry_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

type _MsgPolygon struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgPolygon) Text() string {
	return t.text
}

func (t *_MsgPolygon) Name() string {
	return t.name
}

func (t *_MsgPolygon) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgPolygon) NewMessage() ros.Message {
	m := new(Polygon)

	return m
}

var (
	MsgPolygon = &_MsgPolygon{
		`#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points
`,
		"geometry_msgs/Polygon",
		"cd60a26494a087f577976f0329fa120e",
	}
)

type Polygon struct {
	Points []Point32
}

func (m *Polygon) Serialize(w io.Writer) (err error) {
	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Points)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Points {
		if err = ros.SerializeMessageField(w, "Point32", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *Polygon) Deserialize(r io.Reader) (err error) {
	// Points
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Points: %s", err)
		}
		m.Points = make([]Point32, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "Point32", &m.Points[i]); err != nil {
				return err
			}
		}
	}

	return
}
