// Code generated by ros-gen-go.
// source: GridCells.msg
// DO NOT EDIT!
package nav_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/geometry_msgs"
	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgGridCells struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgGridCells) Text() string {
	return t.text
}

func (t *_MsgGridCells) Name() string {
	return t.name
}

func (t *_MsgGridCells) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgGridCells) NewMessage() ros.Message {
	m := new(GridCells)

	return m
}

var (
	MsgGridCells = &_MsgGridCells{
		`#an array of cells in a 2D grid
Header header
float32 cell_width
float32 cell_height
geometry_msgs/Point[] cells
`,
		"nav_msgs/GridCells",
		"b9e4f5df6d28e272ebde00a3994830f5",
	}
)

type GridCells struct {
	Header     std_msgs.Header
	CellWidth  float32
	CellHeight float32
	Cells      []geometry_msgs.Point
}

func (m *GridCells) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.CellWidth); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.CellHeight); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Cells)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Cells {
		if err = ros.SerializeMessageField(w, "geometry_msgs/Point", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *GridCells) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "Header", &m.Header); err != nil {
		return err
	}

	// CellWidth
	if err = ros.DeserializeMessageField(r, "float32", &m.CellWidth); err != nil {
		return err
	}

	// CellHeight
	if err = ros.DeserializeMessageField(r, "float32", &m.CellHeight); err != nil {
		return err
	}

	// Cells
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Cells: %s", err)
		}
		m.Cells = make([]geometry_msgs.Point, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "geometry_msgs/Point", &m.Cells[i]); err != nil {
				return err
			}
		}
	}

	return
}
