// Code generated by ros-gen-go.
// source: OccupancyGrid.msg
// DO NOT EDIT!
package nav_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgOccupancyGrid struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgOccupancyGrid) Text() string {
	return t.text
}

func (t *_MsgOccupancyGrid) Name() string {
	return t.name
}

func (t *_MsgOccupancyGrid) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgOccupancyGrid) NewMessage() ros.Message {
	m := new(OccupancyGrid)

	return m
}

var (
	MsgOccupancyGrid = &_MsgOccupancyGrid{
		`# This represents a 2-D grid map, in which each cell represents the probability of
# occupancy.

Header header 

#MetaData for the map
MapMetaData info

# The map data, in row-major order, starting with (0,0).  Occupancy
# probabilities are in the range [0,100].  Unknown is -1.
int8[] data
`,
		"nav_msgs/OccupancyGrid",
		"3381f2d731d4076ec5c71b0759edbe4e",
	}
)

type OccupancyGrid struct {
	Header std_msgs.Header
	Info   MapMetaData
	Data   []int8
}

func (m *OccupancyGrid) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "MapMetaData", &m.Info); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Data)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Data {
		if err = ros.SerializeMessageField(w, "int8", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *OccupancyGrid) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "Header", &m.Header); err != nil {
		return err
	}

	// Info
	if err = ros.DeserializeMessageField(r, "MapMetaData", &m.Info); err != nil {
		return err
	}

	// Data
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Data: %s", err)
		}
		m.Data = make([]int8, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "int8", &m.Data[i]); err != nil {
				return err
			}
		}
	}

	return
}
