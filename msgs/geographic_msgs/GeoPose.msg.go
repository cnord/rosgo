// Code generated by ros-gen-go.
// source: GeoPose.msg
// DO NOT EDIT!
package geographic_msgs

import (
	"io"

	"github.com/cnord/rosgo/msgs/geometry_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgGeoPose struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgGeoPose) Text() string {
	return t.text
}

func (t *_MsgGeoPose) Name() string {
	return t.name
}

func (t *_MsgGeoPose) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgGeoPose) NewMessage() ros.Message {
	m := new(GeoPose)

	return m
}

var (
	MsgGeoPose = &_MsgGeoPose{
		`# Geographic pose, using the WGS 84 reference ellipsoid.
#
# Orientation uses the East-North-Up (ENU) frame of reference.
# (But, what about singularities at the poles?)

GeoPoint position
geometry_msgs/Quaternion orientation
`,
		"geographic_msgs/GeoPose",
		"778680b5172de58b7c057d973576c784",
	}
)

type GeoPose struct {
	Position    GeoPoint
	Orientation geometry_msgs.Quaternion
}

func (m *GeoPose) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "GeoPoint", &m.Position); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "geometry_msgs/Quaternion", &m.Orientation); err != nil {
		return err
	}

	return
}

func (m *GeoPose) Deserialize(r io.Reader) (err error) {
	// Position
	if err = ros.DeserializeMessageField(r, "GeoPoint", &m.Position); err != nil {
		return err
	}

	// Orientation
	if err = ros.DeserializeMessageField(r, "geometry_msgs/Quaternion", &m.Orientation); err != nil {
		return err
	}

	return
}
