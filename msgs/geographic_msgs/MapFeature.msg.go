// Code generated by ros-gen-go.
// source: MapFeature.msg
// DO NOT EDIT!
package geographic_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/uuid_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgMapFeature struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgMapFeature) Text() string {
	return t.text
}

func (t *_MsgMapFeature) Name() string {
	return t.name
}

func (t *_MsgMapFeature) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgMapFeature) NewMessage() ros.Message {
	m := new(MapFeature)

	return m
}

var (
	MsgMapFeature = &_MsgMapFeature{
		`# Geographic map feature.
#
# A list of WayPoint IDs for features like streets, highways, hiking
# trails, the outlines of buildings and parking lots in sequential
# order.
#
# Feature lists may also contain other feature lists as members.

uuid_msgs/UniqueID   id         # Unique feature identifier
uuid_msgs/UniqueID[] components # Sequence of feature components
KeyValue[] props                # Key/value properties for this feature
`,
		"geographic_msgs/MapFeature",
		"e2505ace5e8da8a15b610eaf62bdefae",
	}
)

type MapFeature struct {
	Id         uuid_msgs.UniqueID
	Components []uuid_msgs.UniqueID
	Props      []KeyValue
}

func (m *MapFeature) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "uuid_msgs/UniqueID", &m.Id); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Components)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Components {
		if err = ros.SerializeMessageField(w, "uuid_msgs/UniqueID", &elem); err != nil {
			return err
		}
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Props)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Props {
		if err = ros.SerializeMessageField(w, "KeyValue", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *MapFeature) Deserialize(r io.Reader) (err error) {
	// Id
	if err = ros.DeserializeMessageField(r, "uuid_msgs/UniqueID", &m.Id); err != nil {
		return err
	}

	// Components
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Components: %s", err)
		}
		m.Components = make([]uuid_msgs.UniqueID, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "uuid_msgs/UniqueID", &m.Components[i]); err != nil {
				return err
			}
		}
	}

	// Props
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Props: %s", err)
		}
		m.Props = make([]KeyValue, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "KeyValue", &m.Props[i]); err != nil {
				return err
			}
		}
	}

	return
}
