// Code generated by ros-gen-go.
// source: RoutePath.msg
// DO NOT EDIT!
package geographic_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/msgs/uuid_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgRoutePath struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgRoutePath) Text() string {
	return t.text
}

func (t *_MsgRoutePath) Name() string {
	return t.name
}

func (t *_MsgRoutePath) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgRoutePath) NewMessage() ros.Message {
	m := new(RoutePath)

	return m
}

var (
	MsgRoutePath = &_MsgRoutePath{
		`# Path through a route network.
#
# A path is a sequence of RouteSegment edges.  This information is
# extracted from a RouteNetwork graph.  A RoutePath lists the route
# segments needed to reach some chosen goal.

Header header

uuid_msgs/UniqueID   network    # Route network containing this path
uuid_msgs/UniqueID[] segments   # Sequence of RouteSegment IDs
KeyValue[]           props      # Key/value properties
`,
		"geographic_msgs/RoutePath",
		"0aa2dd809a8091bdb4466dfefecbb8cf",
	}
)

type RoutePath struct {
	Header   std_msgs.Header
	Network  uuid_msgs.UniqueID
	Segments []uuid_msgs.UniqueID
	Props    []KeyValue
}

func (m *RoutePath) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uuid_msgs/UniqueID", &m.Network); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Segments)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Segments {
		if err = ros.SerializeMessageField(w, "uuid_msgs/UniqueID", &elem); err != nil {
			return err
		}
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Props)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Props {
		if err = ros.SerializeMessageField(w, "KeyValue", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *RoutePath) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "Header", &m.Header); err != nil {
		return err
	}

	// Network
	if err = ros.DeserializeMessageField(r, "uuid_msgs/UniqueID", &m.Network); err != nil {
		return err
	}

	// Segments
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Segments: %s", err)
		}
		m.Segments = make([]uuid_msgs.UniqueID, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "uuid_msgs/UniqueID", &m.Segments[i]); err != nil {
				return err
			}
		}
	}

	// Props
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Props: %s", err)
		}
		m.Props = make([]KeyValue, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "KeyValue", &m.Props[i]); err != nil {
				return err
			}
		}
	}

	return
}
