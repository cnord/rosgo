// Code generated by ros-gen-go.
// source: GeoPoint.msg
// DO NOT EDIT!
package geographic_msgs

import (
	"io"

	"github.com/cnord/rosgo/ros"
)

type _MsgGeoPoint struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgGeoPoint) Text() string {
	return t.text
}

func (t *_MsgGeoPoint) Name() string {
	return t.name
}

func (t *_MsgGeoPoint) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgGeoPoint) NewMessage() ros.Message {
	m := new(GeoPoint)

	return m
}

var (
	MsgGeoPoint = &_MsgGeoPoint{
		`# Geographic point, using the WGS 84 reference ellipsoid.

# Latitude [degrees]. Positive is north of equator; negative is south
# (-90 <= latitude <= +90).
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or
# +90, and longitude is irrelevant, but must be in range.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
float64 altitude
`,
		"geographic_msgs/GeoPoint",
		"c48027a852aeff972be80478ff38e81a",
	}
)

type GeoPoint struct {
	Latitude  float64
	Longitude float64
	Altitude  float64
}

func (m *GeoPoint) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "float64", &m.Latitude); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float64", &m.Longitude); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float64", &m.Altitude); err != nil {
		return err
	}

	return
}

func (m *GeoPoint) Deserialize(r io.Reader) (err error) {
	// Latitude
	if err = ros.DeserializeMessageField(r, "float64", &m.Latitude); err != nil {
		return err
	}

	// Longitude
	if err = ros.DeserializeMessageField(r, "float64", &m.Longitude); err != nil {
		return err
	}

	// Altitude
	if err = ros.DeserializeMessageField(r, "float64", &m.Altitude); err != nil {
		return err
	}

	return
}
