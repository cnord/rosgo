// Code generated by ros-gen-go.
// source: RouteSegment.msg
// DO NOT EDIT!
package geographic_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/uuid_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgRouteSegment struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgRouteSegment) Text() string {
	return t.text
}

func (t *_MsgRouteSegment) Name() string {
	return t.name
}

func (t *_MsgRouteSegment) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgRouteSegment) NewMessage() ros.Message {
	m := new(RouteSegment)

	return m
}

var (
	MsgRouteSegment = &_MsgRouteSegment{
		`# Route network segment.
#
# This is one directed edge of a RouteNetwork graph. It represents a
# known path from one way point to another.  If the path is two-way,
# there will be another RouteSegment with "start" and "end" reversed.

uuid_msgs/UniqueID id           # Unique identifier for this segment

uuid_msgs/UniqueID start        # beginning way point of segment
uuid_msgs/UniqueID end          # ending way point of segment

KeyValue[] props                # segment properties
`,
		"geographic_msgs/RouteSegment",
		"8583d1e2ddf1891c3934a5d2ed9a799c",
	}
)

type RouteSegment struct {
	Id    uuid_msgs.UniqueID
	Start uuid_msgs.UniqueID
	End   uuid_msgs.UniqueID
	Props []KeyValue
}

func (m *RouteSegment) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "uuid_msgs/UniqueID", &m.Id); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uuid_msgs/UniqueID", &m.Start); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uuid_msgs/UniqueID", &m.End); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Props)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Props {
		if err = ros.SerializeMessageField(w, "KeyValue", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *RouteSegment) Deserialize(r io.Reader) (err error) {
	// Id
	if err = ros.DeserializeMessageField(r, "uuid_msgs/UniqueID", &m.Id); err != nil {
		return err
	}

	// Start
	if err = ros.DeserializeMessageField(r, "uuid_msgs/UniqueID", &m.Start); err != nil {
		return err
	}

	// End
	if err = ros.DeserializeMessageField(r, "uuid_msgs/UniqueID", &m.End); err != nil {
		return err
	}

	// Props
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Props: %s", err)
		}
		m.Props = make([]KeyValue, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "KeyValue", &m.Props[i]); err != nil {
				return err
			}
		}
	}

	return
}
