// Code generated by ros-gen-go.
// source: Image.msg
// DO NOT EDIT!
package sensor_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgImage struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgImage) Text() string {
	return t.text
}

func (t *_MsgImage) Name() string {
	return t.name
}

func (t *_MsgImage) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgImage) NewMessage() ros.Message {
	m := new(Image)

	return m
}

var (
	MsgImage = &_MsgImage{
		`# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)
`,
		"sensor_msgs/Image",
		"060021388200f6f0f447d0fcd9c64743",
	}
)

type Image struct {
	Header      std_msgs.Header
	Height      uint32
	Width       uint32
	Encoding    string
	IsBigendian uint8
	Step        uint32
	Data        []uint8
}

func (m *Image) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint32", &m.Height); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint32", &m.Width); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "string", &m.Encoding); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.IsBigendian); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint32", &m.Step); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Data)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Data {
		if err = ros.SerializeMessageField(w, "uint8", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *Image) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "Header", &m.Header); err != nil {
		return err
	}

	// Height
	if err = ros.DeserializeMessageField(r, "uint32", &m.Height); err != nil {
		return err
	}

	// Width
	if err = ros.DeserializeMessageField(r, "uint32", &m.Width); err != nil {
		return err
	}

	// Encoding
	if err = ros.DeserializeMessageField(r, "string", &m.Encoding); err != nil {
		return err
	}

	// IsBigendian
	if err = ros.DeserializeMessageField(r, "uint8", &m.IsBigendian); err != nil {
		return err
	}

	// Step
	if err = ros.DeserializeMessageField(r, "uint32", &m.Step); err != nil {
		return err
	}

	// Data
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Data: %s", err)
		}
		m.Data = make([]uint8, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "uint8", &m.Data[i]); err != nil {
				return err
			}
		}
	}

	return
}
