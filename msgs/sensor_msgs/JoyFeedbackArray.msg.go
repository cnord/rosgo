// Code generated by ros-gen-go.
// source: JoyFeedbackArray.msg
// DO NOT EDIT!
package sensor_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

type _MsgJoyFeedbackArray struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgJoyFeedbackArray) Text() string {
	return t.text
}

func (t *_MsgJoyFeedbackArray) Name() string {
	return t.name
}

func (t *_MsgJoyFeedbackArray) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgJoyFeedbackArray) NewMessage() ros.Message {
	m := new(JoyFeedbackArray)

	return m
}

var (
	MsgJoyFeedbackArray = &_MsgJoyFeedbackArray{
		`# This message publishes values for multiple feedback at once. 
JoyFeedback[] array`,
		"sensor_msgs/JoyFeedbackArray",
		"cde5730a895b1fc4dee6f91b754b213d",
	}
)

type JoyFeedbackArray struct {
	Array []JoyFeedback
}

func (m *JoyFeedbackArray) Serialize(w io.Writer) (err error) {
	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Array)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Array {
		if err = ros.SerializeMessageField(w, "JoyFeedback", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *JoyFeedbackArray) Deserialize(r io.Reader) (err error) {
	// Array
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Array: %s", err)
		}
		m.Array = make([]JoyFeedback, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "JoyFeedback", &m.Array[i]); err != nil {
				return err
			}
		}
	}

	return
}
