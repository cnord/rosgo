// Code generated by ros-gen-go.
// source: ChannelFloat32.msg
// DO NOT EDIT!
package sensor_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

type _MsgChannelFloat32 struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgChannelFloat32) Text() string {
	return t.text
}

func (t *_MsgChannelFloat32) Name() string {
	return t.name
}

func (t *_MsgChannelFloat32) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgChannelFloat32) NewMessage() ros.Message {
	m := new(ChannelFloat32)

	return m
}

var (
	MsgChannelFloat32 = &_MsgChannelFloat32{
		`# This message is used by the PointCloud message to hold optional data
# associated with each point in the cloud. The length of the values
# array should be the same as the length of the points array in the
# PointCloud, and each value should be associated with the corresponding
# point.

# Channel names in existing practice include:
#   "u", "v" - row and column (respectively) in the left stereo image.
#              This is opposite to usual conventions but remains for
#              historical reasons. The newer PointCloud2 message has no
#              such problem.
#   "rgb" - For point clouds produced by color stereo cameras. uint8
#           (R,G,B) values packed into the least significant 24 bits,
#           in order.
#   "intensity" - laser or pixel intensity.
#   "distance"

# The channel name should give semantics of the channel (e.g.
# "intensity" instead of "value").
string name

# The values array should be 1-1 with the elements of the associated
# PointCloud.
float32[] values
`,
		"sensor_msgs/ChannelFloat32",
		"3d40139cdd33dfedcb71ffeeeb42ae7f",
	}
)

type ChannelFloat32 struct {
	Name   string
	Values []float32
}

func (m *ChannelFloat32) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "string", &m.Name); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Values)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Values {
		if err = ros.SerializeMessageField(w, "float32", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *ChannelFloat32) Deserialize(r io.Reader) (err error) {
	// Name
	if err = ros.DeserializeMessageField(r, "string", &m.Name); err != nil {
		return err
	}

	// Values
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Values: %s", err)
		}
		m.Values = make([]float32, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float32", &m.Values[i]); err != nil {
				return err
			}
		}
	}

	return
}
