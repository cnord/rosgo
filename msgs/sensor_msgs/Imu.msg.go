// Code generated by ros-gen-go.
// source: Imu.msg
// DO NOT EDIT!
package sensor_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/geometry_msgs"
	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgImu struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgImu) Text() string {
	return t.text
}

func (t *_MsgImu) Name() string {
	return t.name
}

func (t *_MsgImu) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgImu) NewMessage() ros.Message {
	m := new(Imu)

	return m
}

var (
	MsgImu = &_MsgImu{
		`# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 
`,
		"sensor_msgs/Imu",
		"6a62c6daae103f4ff57a132d6f95cec2",
	}
)

type Imu struct {
	Header                       std_msgs.Header
	Orientation                  geometry_msgs.Quaternion
	OrientationCovariance        [9]float64
	AngularVelocity              geometry_msgs.Vector3
	AngularVelocityCovariance    [9]float64
	LinearAcceleration           geometry_msgs.Vector3
	LinearAccelerationCovariance [9]float64
}

func (m *Imu) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "geometry_msgs/Quaternion", &m.Orientation); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.OrientationCovariance)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.OrientationCovariance {
		if err = ros.SerializeMessageField(w, "float64", &elem); err != nil {
			return err
		}
	}

	if err = ros.SerializeMessageField(w, "geometry_msgs/Vector3", &m.AngularVelocity); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.AngularVelocityCovariance)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.AngularVelocityCovariance {
		if err = ros.SerializeMessageField(w, "float64", &elem); err != nil {
			return err
		}
	}

	if err = ros.SerializeMessageField(w, "geometry_msgs/Vector3", &m.LinearAcceleration); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.LinearAccelerationCovariance)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.LinearAccelerationCovariance {
		if err = ros.SerializeMessageField(w, "float64", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *Imu) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "Header", &m.Header); err != nil {
		return err
	}

	// Orientation
	if err = ros.DeserializeMessageField(r, "geometry_msgs/Quaternion", &m.Orientation); err != nil {
		return err
	}

	// OrientationCovariance
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for OrientationCovariance: %s", err)
		}
		if size > 9 {
			return fmt.Errorf("array size for OrientationCovariance too large: expected=9, got=%d", size)
		}
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float64", &m.OrientationCovariance[i]); err != nil {
				return err
			}
		}
	}

	// AngularVelocity
	if err = ros.DeserializeMessageField(r, "geometry_msgs/Vector3", &m.AngularVelocity); err != nil {
		return err
	}

	// AngularVelocityCovariance
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for AngularVelocityCovariance: %s", err)
		}
		if size > 9 {
			return fmt.Errorf("array size for AngularVelocityCovariance too large: expected=9, got=%d", size)
		}
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float64", &m.AngularVelocityCovariance[i]); err != nil {
				return err
			}
		}
	}

	// LinearAcceleration
	if err = ros.DeserializeMessageField(r, "geometry_msgs/Vector3", &m.LinearAcceleration); err != nil {
		return err
	}

	// LinearAccelerationCovariance
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for LinearAccelerationCovariance: %s", err)
		}
		if size > 9 {
			return fmt.Errorf("array size for LinearAccelerationCovariance too large: expected=9, got=%d", size)
		}
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float64", &m.LinearAccelerationCovariance[i]); err != nil {
				return err
			}
		}
	}

	return
}
