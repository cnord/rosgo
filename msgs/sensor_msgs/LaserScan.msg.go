// Code generated by ros-gen-go.
// source: LaserScan.msg
// DO NOT EDIT!
package sensor_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgLaserScan struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgLaserScan) Text() string {
	return t.text
}

func (t *_MsgLaserScan) Name() string {
	return t.name
}

func (t *_MsgLaserScan) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgLaserScan) NewMessage() ros.Message {
	m := new(LaserScan)

	return m
}

var (
	MsgLaserScan = &_MsgLaserScan{
		`# Single scan from a planar laser range-finder
#
# If you have another ranging device with different behavior (e.g. a sonar
# array), please find or create a different message, since applications
# will make fairly laser-specific assumptions about this data

Header header            # timestamp in the header is the acquisition time of 
                         # the first ray in the scan.
                         #
                         # in frame frame_id, angles are measured around 
                         # the positive Z axis (counterclockwise, if Z is up)
                         # with zero angle being forward along the x axis
                         
float32 angle_min        # start angle of the scan [rad]
float32 angle_max        # end angle of the scan [rad]
float32 angle_increment  # angular distance between measurements [rad]

float32 time_increment   # time between measurements [seconds] - if your scanner
                         # is moving, this will be used in interpolating position
                         # of 3d points
float32 scan_time        # time between scans [seconds]

float32 range_min        # minimum range value [m]
float32 range_max        # maximum range value [m]

float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)
float32[] intensities    # intensity data [device-specific units].  If your
                         # device does not provide intensities, please leave
                         # the array empty.
`,
		"sensor_msgs/LaserScan",
		"90c7ef2dc6895d81024acba2ac42f369",
	}
)

type LaserScan struct {
	Header         std_msgs.Header
	AngleMin       float32
	AngleMax       float32
	AngleIncrement float32
	TimeIncrement  float32
	ScanTime       float32
	RangeMin       float32
	RangeMax       float32
	Ranges         []float32
	Intensities    []float32
}

func (m *LaserScan) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.AngleMin); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.AngleMax); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.AngleIncrement); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.TimeIncrement); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.ScanTime); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.RangeMin); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "float32", &m.RangeMax); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Ranges)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Ranges {
		if err = ros.SerializeMessageField(w, "float32", &elem); err != nil {
			return err
		}
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Intensities)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Intensities {
		if err = ros.SerializeMessageField(w, "float32", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *LaserScan) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "Header", &m.Header); err != nil {
		return err
	}

	// AngleMin
	if err = ros.DeserializeMessageField(r, "float32", &m.AngleMin); err != nil {
		return err
	}

	// AngleMax
	if err = ros.DeserializeMessageField(r, "float32", &m.AngleMax); err != nil {
		return err
	}

	// AngleIncrement
	if err = ros.DeserializeMessageField(r, "float32", &m.AngleIncrement); err != nil {
		return err
	}

	// TimeIncrement
	if err = ros.DeserializeMessageField(r, "float32", &m.TimeIncrement); err != nil {
		return err
	}

	// ScanTime
	if err = ros.DeserializeMessageField(r, "float32", &m.ScanTime); err != nil {
		return err
	}

	// RangeMin
	if err = ros.DeserializeMessageField(r, "float32", &m.RangeMin); err != nil {
		return err
	}

	// RangeMax
	if err = ros.DeserializeMessageField(r, "float32", &m.RangeMax); err != nil {
		return err
	}

	// Ranges
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Ranges: %s", err)
		}
		m.Ranges = make([]float32, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float32", &m.Ranges[i]); err != nil {
				return err
			}
		}
	}

	// Intensities
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Intensities: %s", err)
		}
		m.Intensities = make([]float32, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "float32", &m.Intensities[i]); err != nil {
				return err
			}
		}
	}

	return
}
