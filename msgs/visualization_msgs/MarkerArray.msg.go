// Code generated by ros-gen-go.
// source: MarkerArray.msg
// DO NOT EDIT!
package visualization_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

type _MsgMarkerArray struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgMarkerArray) Text() string {
	return t.text
}

func (t *_MsgMarkerArray) Name() string {
	return t.name
}

func (t *_MsgMarkerArray) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgMarkerArray) NewMessage() ros.Message {
	m := new(MarkerArray)

	return m
}

var (
	MsgMarkerArray = &_MsgMarkerArray{
		`Marker[] markers
`,
		"visualization_msgs/MarkerArray",
		"d155b9ce5188fbaf89745847fd5882d7",
	}
)

type MarkerArray struct {
	Markers []Marker
}

func (m *MarkerArray) Serialize(w io.Writer) (err error) {
	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Markers)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Markers {
		if err = ros.SerializeMessageField(w, "Marker", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *MarkerArray) Deserialize(r io.Reader) (err error) {
	// Markers
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Markers: %s", err)
		}
		m.Markers = make([]Marker, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "Marker", &m.Markers[i]); err != nil {
				return err
			}
		}
	}

	return
}
