// Code generated by ros-gen-go.
// source: InteractiveMarkerFeedback.msg
// DO NOT EDIT!
package visualization_msgs

import (
	"io"

	"github.com/cnord/rosgo/msgs/geometry_msgs"
	"github.com/cnord/rosgo/msgs/std_msgs"
	"github.com/cnord/rosgo/ros"
)

type _MsgInteractiveMarkerFeedback struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgInteractiveMarkerFeedback) Text() string {
	return t.text
}

func (t *_MsgInteractiveMarkerFeedback) Name() string {
	return t.name
}

func (t *_MsgInteractiveMarkerFeedback) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgInteractiveMarkerFeedback) NewMessage() ros.Message {
	m := new(InteractiveMarkerFeedback)

	return m
}

var (
	MsgInteractiveMarkerFeedback = &_MsgInteractiveMarkerFeedback{
		`# Time/frame info.
Header header

# Identifying string. Must be unique in the topic namespace.
string client_id

# Feedback message sent back from the GUI, e.g.
# when the status of an interactive marker was modified by the user.

# Specifies which interactive marker and control this message refers to
string marker_name
string control_name

# Type of the event
# KEEP_ALIVE: sent while dragging to keep up control of the marker
# MENU_SELECT: a menu entry has been selected
# BUTTON_CLICK: a button control has been clicked
# POSE_UPDATE: the pose has been changed using one of the controls
uint8 KEEP_ALIVE = 0
uint8 POSE_UPDATE = 1
uint8 MENU_SELECT = 2
uint8 BUTTON_CLICK = 3

uint8 MOUSE_DOWN = 4
uint8 MOUSE_UP = 5

uint8 event_type

# Current pose of the marker
# Note: Has to be valid for all feedback types.
geometry_msgs/Pose pose

# Contains the ID of the selected menu entry
# Only valid for MENU_SELECT events.
uint32 menu_entry_id

# If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point
# may contain the 3 dimensional position of the event on the
# control.  If it does, mouse_point_valid will be true.  mouse_point
# will be relative to the frame listed in the header.
geometry_msgs/Point mouse_point
bool mouse_point_valid
`,
		"visualization_msgs/InteractiveMarkerFeedback",
		"ab0f1eee058667e28c19ff3ffc3f4b78",
	}
)

type InteractiveMarkerFeedback struct {
	Header          std_msgs.Header
	ClientId        string
	MarkerName      string
	ControlName     string
	EventType       uint8
	Pose            geometry_msgs.Pose
	MenuEntryId     uint32
	MousePoint      geometry_msgs.Point
	MousePointValid bool
}

func (m *InteractiveMarkerFeedback) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "Header", &m.Header); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "string", &m.ClientId); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "string", &m.MarkerName); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "string", &m.ControlName); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint8", &m.EventType); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "geometry_msgs/Pose", &m.Pose); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint32", &m.MenuEntryId); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "geometry_msgs/Point", &m.MousePoint); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "bool", &m.MousePointValid); err != nil {
		return err
	}

	return
}

func (m *InteractiveMarkerFeedback) Deserialize(r io.Reader) (err error) {
	// Header
	if err = ros.DeserializeMessageField(r, "Header", &m.Header); err != nil {
		return err
	}

	// ClientId
	if err = ros.DeserializeMessageField(r, "string", &m.ClientId); err != nil {
		return err
	}

	// MarkerName
	if err = ros.DeserializeMessageField(r, "string", &m.MarkerName); err != nil {
		return err
	}

	// ControlName
	if err = ros.DeserializeMessageField(r, "string", &m.ControlName); err != nil {
		return err
	}

	// EventType
	if err = ros.DeserializeMessageField(r, "uint8", &m.EventType); err != nil {
		return err
	}

	// Pose
	if err = ros.DeserializeMessageField(r, "geometry_msgs/Pose", &m.Pose); err != nil {
		return err
	}

	// MenuEntryId
	if err = ros.DeserializeMessageField(r, "uint32", &m.MenuEntryId); err != nil {
		return err
	}

	// MousePoint
	if err = ros.DeserializeMessageField(r, "geometry_msgs/Point", &m.MousePoint); err != nil {
		return err
	}

	// MousePointValid
	if err = ros.DeserializeMessageField(r, "bool", &m.MousePointValid); err != nil {
		return err
	}

	return
}
