// Code generated by ros-gen-go.
// source: InteractiveMarkerInit.msg
// DO NOT EDIT!
package visualization_msgs

import (
	"encoding/binary"
	"fmt"
	"io"

	"github.com/cnord/rosgo/ros"
)

type _MsgInteractiveMarkerInit struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgInteractiveMarkerInit) Text() string {
	return t.text
}

func (t *_MsgInteractiveMarkerInit) Name() string {
	return t.name
}

func (t *_MsgInteractiveMarkerInit) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgInteractiveMarkerInit) NewMessage() ros.Message {
	m := new(InteractiveMarkerInit)

	return m
}

var (
	MsgInteractiveMarkerInit = &_MsgInteractiveMarkerInit{
		`# Identifying string. Must be unique in the topic namespace
# that this server works on.
string server_id

# Sequence number.
# The client will use this to detect if it has missed a subsequent
# update.  Every update message will have the same sequence number as
# an init message.  Clients will likely want to unsubscribe from the
# init topic after a successful initialization to avoid receiving
# duplicate data.
uint64 seq_num

# All markers.
InteractiveMarker[] markers
`,
		"visualization_msgs/InteractiveMarkerInit",
		"d5f2c5045a72456d228676ab91048734",
	}
)

type InteractiveMarkerInit struct {
	ServerId string
	SeqNum   uint64
	Markers  []InteractiveMarker
}

func (m *InteractiveMarkerInit) Serialize(w io.Writer) (err error) {
	if err = ros.SerializeMessageField(w, "string", &m.ServerId); err != nil {
		return err
	}

	if err = ros.SerializeMessageField(w, "uint64", &m.SeqNum); err != nil {
		return err
	}

	// Write size little endian
	err = binary.Write(w, binary.LittleEndian, uint32(len(m.Markers)))
	if err != nil {
		return fmt.Errorf("could not write array length: %s", err)
	}
	for _, elem := range m.Markers {
		if err = ros.SerializeMessageField(w, "InteractiveMarker", &elem); err != nil {
			return err
		}
	}

	return
}

func (m *InteractiveMarkerInit) Deserialize(r io.Reader) (err error) {
	// ServerId
	if err = ros.DeserializeMessageField(r, "string", &m.ServerId); err != nil {
		return err
	}

	// SeqNum
	if err = ros.DeserializeMessageField(r, "uint64", &m.SeqNum); err != nil {
		return err
	}

	// Markers
	{
		// Read size little endian
		var size uint32
		if err = binary.Read(r, binary.LittleEndian, &size); err != nil {
			return fmt.Errorf("cannot read array size for Markers: %s", err)
		}
		m.Markers = make([]InteractiveMarker, int(size))
		for i := 0; i < int(size); i++ {
			if err = ros.DeserializeMessageField(r, "InteractiveMarker", &m.Markers[i]); err != nil {
				return err
			}
		}
	}

	return
}
